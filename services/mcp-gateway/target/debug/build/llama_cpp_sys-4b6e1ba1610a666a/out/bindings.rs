/* automatically generated by rust-bindgen 0.69.5 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 3usize]>,
    pub _short_backupbuf: [::std::os::raw::c_char; 1usize],
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub _prevchain: *mut *mut _IO_FILE,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    const UNINIT: ::std::mem::MaybeUninit<_IO_FILE> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_ptr) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_end) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_read_base) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_base) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_ptr) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_write_end) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_base) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_buf_end) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_base) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_backup_base) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._IO_save_end) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._markers) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._chain) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._fileno) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._short_backupbuf) as usize - ptr as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_short_backupbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._old_offset) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._cur_column) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._vtable_offset) as usize - ptr as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._shortbuf) as usize - ptr as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._lock) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._offset) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._codecvt) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_codecvt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._wide_data) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_wide_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_list) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_list)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._freeres_buf) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_freeres_buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._prevchain) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_prevchain)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._mode) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._unused2) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
impl _IO_FILE {
    #[inline]
    pub fn _flags2(&self) -> ::std::os::raw::c_int {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set__flags2(&mut self, val: ::std::os::raw::c_int) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(_flags2: ::std::os::raw::c_int) -> __BindgenBitfieldUnit<[u8; 3usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 3usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 24u8, {
            let _flags2: u32 = unsafe { ::std::mem::transmute(_flags2) };
            _flags2 as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ggml_status {
    GGML_STATUS_ALLOC_FAILED = -2,
    GGML_STATUS_FAILED = -1,
    GGML_STATUS_SUCCESS = 0,
    GGML_STATUS_ABORTED = 1,
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_status_to_string"]
    pub fn ggml_status_to_string(status: ggml_status) -> *const ::std::os::raw::c_char;
}
pub type ggml_fp16_t = u16;
extern "C" {
    #[link_name = "\u{1}llm_ggml_fp16_to_fp32"]
    pub fn ggml_fp16_to_fp32(x: ggml_fp16_t) -> f32;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_fp32_to_fp16"]
    pub fn ggml_fp32_to_fp16(x: f32) -> ggml_fp16_t;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_fp16_to_fp32_row"]
    pub fn ggml_fp16_to_fp32_row(x: *const ggml_fp16_t, y: *mut f32, n: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_fp32_to_fp16_row"]
    pub fn ggml_fp32_to_fp16_row(x: *const f32, y: *mut ggml_fp16_t, n: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_context {
    _unused: [u8; 0],
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ggml_type {
    GGML_TYPE_F32 = 0,
    GGML_TYPE_F16 = 1,
    GGML_TYPE_Q4_0 = 2,
    GGML_TYPE_Q4_1 = 3,
    GGML_TYPE_Q5_0 = 6,
    GGML_TYPE_Q5_1 = 7,
    GGML_TYPE_Q8_0 = 8,
    GGML_TYPE_Q8_1 = 9,
    GGML_TYPE_Q2_K = 10,
    GGML_TYPE_Q3_K = 11,
    GGML_TYPE_Q4_K = 12,
    GGML_TYPE_Q5_K = 13,
    GGML_TYPE_Q6_K = 14,
    GGML_TYPE_Q8_K = 15,
    GGML_TYPE_IQ2_XXS = 16,
    GGML_TYPE_IQ2_XS = 17,
    GGML_TYPE_IQ3_XXS = 18,
    GGML_TYPE_IQ1_S = 19,
    GGML_TYPE_IQ4_NL = 20,
    GGML_TYPE_IQ3_S = 21,
    GGML_TYPE_IQ2_S = 22,
    GGML_TYPE_IQ4_XS = 23,
    GGML_TYPE_I8 = 24,
    GGML_TYPE_I16 = 25,
    GGML_TYPE_I32 = 26,
    GGML_TYPE_I64 = 27,
    GGML_TYPE_F64 = 28,
    GGML_TYPE_IQ1_M = 29,
    GGML_TYPE_COUNT = 30,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ggml_prec {
    GGML_PREC_DEFAULT = 0,
    GGML_PREC_F32 = 1,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ggml_backend_type {
    GGML_BACKEND_TYPE_CPU = 0,
    GGML_BACKEND_TYPE_GPU = 10,
    GGML_BACKEND_TYPE_GPU_SPLIT = 20,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ggml_ftype {
    GGML_FTYPE_UNKNOWN = -1,
    GGML_FTYPE_ALL_F32 = 0,
    GGML_FTYPE_MOSTLY_F16 = 1,
    GGML_FTYPE_MOSTLY_Q4_0 = 2,
    GGML_FTYPE_MOSTLY_Q4_1 = 3,
    GGML_FTYPE_MOSTLY_Q4_1_SOME_F16 = 4,
    GGML_FTYPE_MOSTLY_Q8_0 = 7,
    GGML_FTYPE_MOSTLY_Q5_0 = 8,
    GGML_FTYPE_MOSTLY_Q5_1 = 9,
    GGML_FTYPE_MOSTLY_Q2_K = 10,
    GGML_FTYPE_MOSTLY_Q3_K = 11,
    GGML_FTYPE_MOSTLY_Q4_K = 12,
    GGML_FTYPE_MOSTLY_Q5_K = 13,
    GGML_FTYPE_MOSTLY_Q6_K = 14,
    GGML_FTYPE_MOSTLY_IQ2_XXS = 15,
    GGML_FTYPE_MOSTLY_IQ2_XS = 16,
    GGML_FTYPE_MOSTLY_IQ3_XXS = 17,
    GGML_FTYPE_MOSTLY_IQ1_S = 18,
    GGML_FTYPE_MOSTLY_IQ4_NL = 19,
    GGML_FTYPE_MOSTLY_IQ3_S = 20,
    GGML_FTYPE_MOSTLY_IQ2_S = 21,
    GGML_FTYPE_MOSTLY_IQ4_XS = 22,
    GGML_FTYPE_MOSTLY_IQ1_M = 23,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ggml_op {
    GGML_OP_NONE = 0,
    GGML_OP_DUP = 1,
    GGML_OP_ADD = 2,
    GGML_OP_ADD1 = 3,
    GGML_OP_ACC = 4,
    GGML_OP_SUB = 5,
    GGML_OP_MUL = 6,
    GGML_OP_DIV = 7,
    GGML_OP_SQR = 8,
    GGML_OP_SQRT = 9,
    GGML_OP_LOG = 10,
    GGML_OP_SUM = 11,
    GGML_OP_SUM_ROWS = 12,
    GGML_OP_MEAN = 13,
    GGML_OP_ARGMAX = 14,
    GGML_OP_REPEAT = 15,
    GGML_OP_REPEAT_BACK = 16,
    GGML_OP_CONCAT = 17,
    GGML_OP_SILU_BACK = 18,
    GGML_OP_NORM = 19,
    GGML_OP_RMS_NORM = 20,
    GGML_OP_RMS_NORM_BACK = 21,
    GGML_OP_GROUP_NORM = 22,
    GGML_OP_MUL_MAT = 23,
    GGML_OP_MUL_MAT_ID = 24,
    GGML_OP_OUT_PROD = 25,
    GGML_OP_SCALE = 26,
    GGML_OP_SET = 27,
    GGML_OP_CPY = 28,
    GGML_OP_CONT = 29,
    GGML_OP_RESHAPE = 30,
    GGML_OP_VIEW = 31,
    GGML_OP_PERMUTE = 32,
    GGML_OP_TRANSPOSE = 33,
    GGML_OP_GET_ROWS = 34,
    GGML_OP_GET_ROWS_BACK = 35,
    GGML_OP_DIAG = 36,
    GGML_OP_DIAG_MASK_INF = 37,
    GGML_OP_DIAG_MASK_ZERO = 38,
    GGML_OP_SOFT_MAX = 39,
    GGML_OP_SOFT_MAX_BACK = 40,
    GGML_OP_ROPE = 41,
    GGML_OP_ROPE_BACK = 42,
    GGML_OP_ALIBI = 43,
    GGML_OP_CLAMP = 44,
    GGML_OP_CONV_TRANSPOSE_1D = 45,
    GGML_OP_IM2COL = 46,
    GGML_OP_CONV_TRANSPOSE_2D = 47,
    GGML_OP_POOL_1D = 48,
    GGML_OP_POOL_2D = 49,
    GGML_OP_UPSCALE = 50,
    GGML_OP_PAD = 51,
    GGML_OP_ARANGE = 52,
    GGML_OP_TIMESTEP_EMBEDDING = 53,
    GGML_OP_ARGSORT = 54,
    GGML_OP_LEAKY_RELU = 55,
    GGML_OP_FLASH_ATTN = 56,
    GGML_OP_FLASH_FF = 57,
    GGML_OP_FLASH_ATTN_BACK = 58,
    GGML_OP_SSM_CONV = 59,
    GGML_OP_SSM_SCAN = 60,
    GGML_OP_WIN_PART = 61,
    GGML_OP_WIN_UNPART = 62,
    GGML_OP_GET_REL_POS = 63,
    GGML_OP_ADD_REL_POS = 64,
    GGML_OP_UNARY = 65,
    GGML_OP_MAP_UNARY = 66,
    GGML_OP_MAP_BINARY = 67,
    GGML_OP_MAP_CUSTOM1_F32 = 68,
    GGML_OP_MAP_CUSTOM2_F32 = 69,
    GGML_OP_MAP_CUSTOM3_F32 = 70,
    GGML_OP_MAP_CUSTOM1 = 71,
    GGML_OP_MAP_CUSTOM2 = 72,
    GGML_OP_MAP_CUSTOM3 = 73,
    GGML_OP_CROSS_ENTROPY_LOSS = 74,
    GGML_OP_CROSS_ENTROPY_LOSS_BACK = 75,
    GGML_OP_COUNT = 76,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ggml_unary_op {
    GGML_UNARY_OP_ABS = 0,
    GGML_UNARY_OP_SGN = 1,
    GGML_UNARY_OP_NEG = 2,
    GGML_UNARY_OP_STEP = 3,
    GGML_UNARY_OP_TANH = 4,
    GGML_UNARY_OP_ELU = 5,
    GGML_UNARY_OP_RELU = 6,
    GGML_UNARY_OP_GELU = 7,
    GGML_UNARY_OP_GELU_QUICK = 8,
    GGML_UNARY_OP_SILU = 9,
    GGML_UNARY_OP_HARDSWISH = 10,
    GGML_UNARY_OP_HARDSIGMOID = 11,
    GGML_UNARY_OP_COUNT = 12,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ggml_object_type {
    GGML_OBJECT_TYPE_TENSOR = 0,
    GGML_OBJECT_TYPE_GRAPH = 1,
    GGML_OBJECT_TYPE_WORK_BUFFER = 2,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ggml_log_level {
    GGML_LOG_LEVEL_ERROR = 2,
    GGML_LOG_LEVEL_WARN = 3,
    GGML_LOG_LEVEL_INFO = 4,
    GGML_LOG_LEVEL_DEBUG = 5,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ggml_tensor_flag {
    GGML_TENSOR_FLAG_INPUT = 1,
    GGML_TENSOR_FLAG_OUTPUT = 2,
    GGML_TENSOR_FLAG_PARAM = 4,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_object {
    pub offs: usize,
    pub size: usize,
    pub next: *mut ggml_object,
    pub type_: ggml_object_type,
    pub padding: [::std::os::raw::c_char; 4usize],
}
#[test]
fn bindgen_test_layout_ggml_object() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_object> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_object>(),
        32usize,
        concat!("Size of: ", stringify!(ggml_object))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_object>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_object))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_object),
            "::",
            stringify!(offs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_object),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).next) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_object),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_object),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_object),
            "::",
            stringify!(padding)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_tensor {
    pub type_: ggml_type,
    pub backend: ggml_backend_type,
    pub buffer: *mut ggml_backend_buffer,
    pub ne: [i64; 4usize],
    pub nb: [usize; 4usize],
    pub op: ggml_op,
    pub op_params: [i32; 16usize],
    pub flags: i32,
    pub grad: *mut ggml_tensor,
    pub src: [*mut ggml_tensor; 10usize],
    pub perf_runs: ::std::os::raw::c_int,
    pub perf_cycles: i64,
    pub perf_time_us: i64,
    pub view_src: *mut ggml_tensor,
    pub view_offs: usize,
    pub data: *mut ::std::os::raw::c_void,
    pub name: [::std::os::raw::c_char; 64usize],
    pub extra: *mut ::std::os::raw::c_void,
    pub padding: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout_ggml_tensor() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_tensor> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_tensor>(),
        368usize,
        concat!("Size of: ", stringify!(ggml_tensor))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_tensor>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_tensor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).backend) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(backend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ne) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(ne)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nb) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(nb)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(op)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).op_params) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(op_params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grad) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(grad)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).src) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perf_runs) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(perf_runs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perf_cycles) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(perf_cycles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perf_time_us) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(perf_time_us)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).view_src) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(view_src)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).view_offs) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(view_offs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).extra) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(extra)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tensor),
            "::",
            stringify!(padding)
        )
    );
}
pub type ggml_abort_callback =
    ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void) -> bool>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_cplan {
    pub work_size: usize,
    pub work_data: *mut u8,
    pub n_threads: ::std::os::raw::c_int,
    pub abort_callback: ggml_abort_callback,
    pub abort_callback_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ggml_cplan() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_cplan> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_cplan>(),
        40usize,
        concat!("Size of: ", stringify!(ggml_cplan))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_cplan>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_cplan))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).work_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cplan),
            "::",
            stringify!(work_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).work_data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cplan),
            "::",
            stringify!(work_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_threads) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cplan),
            "::",
            stringify!(n_threads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abort_callback) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cplan),
            "::",
            stringify!(abort_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abort_callback_data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cplan),
            "::",
            stringify!(abort_callback_data)
        )
    );
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ggml_cgraph_eval_order {
    GGML_CGRAPH_EVAL_ORDER_LEFT_TO_RIGHT = 0,
    GGML_CGRAPH_EVAL_ORDER_RIGHT_TO_LEFT = 1,
    GGML_CGRAPH_EVAL_ORDER_COUNT = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_hash_set {
    pub size: usize,
    pub keys: *mut *mut ggml_tensor,
}
#[test]
fn bindgen_test_layout_ggml_hash_set() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_hash_set> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_hash_set>(),
        16usize,
        concat!("Size of: ", stringify!(ggml_hash_set))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_hash_set>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_hash_set))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_hash_set),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).keys) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_hash_set),
            "::",
            stringify!(keys)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_cgraph {
    pub size: ::std::os::raw::c_int,
    pub n_nodes: ::std::os::raw::c_int,
    pub n_leafs: ::std::os::raw::c_int,
    pub nodes: *mut *mut ggml_tensor,
    pub grads: *mut *mut ggml_tensor,
    pub leafs: *mut *mut ggml_tensor,
    pub visited_hash_table: ggml_hash_set,
    pub order: ggml_cgraph_eval_order,
    pub perf_runs: ::std::os::raw::c_int,
    pub perf_cycles: i64,
    pub perf_time_us: i64,
}
#[test]
fn bindgen_test_layout_ggml_cgraph() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_cgraph> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_cgraph>(),
        80usize,
        concat!("Size of: ", stringify!(ggml_cgraph))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_cgraph>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_cgraph))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cgraph),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_nodes) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cgraph),
            "::",
            stringify!(n_nodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_leafs) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cgraph),
            "::",
            stringify!(n_leafs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nodes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cgraph),
            "::",
            stringify!(nodes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).grads) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cgraph),
            "::",
            stringify!(grads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).leafs) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cgraph),
            "::",
            stringify!(leafs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).visited_hash_table) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cgraph),
            "::",
            stringify!(visited_hash_table)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).order) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cgraph),
            "::",
            stringify!(order)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perf_runs) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cgraph),
            "::",
            stringify!(perf_runs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perf_cycles) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cgraph),
            "::",
            stringify!(perf_cycles)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).perf_time_us) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_cgraph),
            "::",
            stringify!(perf_time_us)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_scratch {
    pub offs: usize,
    pub size: usize,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ggml_scratch() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_scratch> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_scratch>(),
        24usize,
        concat!("Size of: ", stringify!(ggml_scratch))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_scratch>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_scratch))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_scratch),
            "::",
            stringify!(offs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_scratch),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_scratch),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_init_params {
    pub mem_size: usize,
    pub mem_buffer: *mut ::std::os::raw::c_void,
    pub no_alloc: bool,
}
#[test]
fn bindgen_test_layout_ggml_init_params() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_init_params> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_init_params>(),
        24usize,
        concat!("Size of: ", stringify!(ggml_init_params))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_init_params>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_init_params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_init_params),
            "::",
            stringify!(mem_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).mem_buffer) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_init_params),
            "::",
            stringify!(mem_buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).no_alloc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_init_params),
            "::",
            stringify!(no_alloc)
        )
    );
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ggml_task_type {
    GGML_TASK_TYPE_INIT = 0,
    GGML_TASK_TYPE_COMPUTE = 1,
    GGML_TASK_TYPE_FINALIZE = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_compute_params {
    pub type_: ggml_task_type,
    pub ith: ::std::os::raw::c_int,
    pub nth: ::std::os::raw::c_int,
    pub wsize: usize,
    pub wdata: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_ggml_compute_params() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_compute_params> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_compute_params>(),
        32usize,
        concat!("Size of: ", stringify!(ggml_compute_params))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_compute_params>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_compute_params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_compute_params),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ith) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_compute_params),
            "::",
            stringify!(ith)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nth) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_compute_params),
            "::",
            stringify!(nth)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wsize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_compute_params),
            "::",
            stringify!(wsize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wdata) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_compute_params),
            "::",
            stringify!(wdata)
        )
    );
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ggml_numa_strategy {
    GGML_NUMA_STRATEGY_DISABLED = 0,
    GGML_NUMA_STRATEGY_DISTRIBUTE = 1,
    GGML_NUMA_STRATEGY_ISOLATE = 2,
    GGML_NUMA_STRATEGY_NUMACTL = 3,
    GGML_NUMA_STRATEGY_MIRROR = 4,
    GGML_NUMA_STRATEGY_COUNT = 5,
}
pub type ggml_guid = [u8; 16usize];
pub type ggml_guid_t = *mut ggml_guid;
extern "C" {
    #[link_name = "\u{1}llm_ggml_guid_matches"]
    pub fn ggml_guid_matches(guid_a: ggml_guid_t, guid_b: ggml_guid_t) -> bool;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_time_init"]
    pub fn ggml_time_init();
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_time_ms"]
    pub fn ggml_time_ms() -> i64;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_time_us"]
    pub fn ggml_time_us() -> i64;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cycles"]
    pub fn ggml_cycles() -> i64;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cycles_per_ms"]
    pub fn ggml_cycles_per_ms() -> i64;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_print_backtrace"]
    pub fn ggml_print_backtrace();
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_fopen"]
    pub fn ggml_fopen(
        fname: *const ::std::os::raw::c_char,
        mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_numa_init"]
    pub fn ggml_numa_init(numa: ggml_numa_strategy);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_is_numa"]
    pub fn ggml_is_numa() -> bool;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_print_object"]
    pub fn ggml_print_object(obj: *const ggml_object);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_print_objects"]
    pub fn ggml_print_objects(ctx: *const ggml_context);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_nelements"]
    pub fn ggml_nelements(tensor: *const ggml_tensor) -> i64;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_nrows"]
    pub fn ggml_nrows(tensor: *const ggml_tensor) -> i64;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_nbytes"]
    pub fn ggml_nbytes(tensor: *const ggml_tensor) -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_nbytes_pad"]
    pub fn ggml_nbytes_pad(tensor: *const ggml_tensor) -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_blck_size"]
    pub fn ggml_blck_size(type_: ggml_type) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_type_size"]
    pub fn ggml_type_size(type_: ggml_type) -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_row_size"]
    pub fn ggml_row_size(type_: ggml_type, ne: i64) -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_type_sizef"]
    pub fn ggml_type_sizef(type_: ggml_type) -> f64;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_type_name"]
    pub fn ggml_type_name(type_: ggml_type) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_op_name"]
    pub fn ggml_op_name(op: ggml_op) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_op_symbol"]
    pub fn ggml_op_symbol(op: ggml_op) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_unary_op_name"]
    pub fn ggml_unary_op_name(op: ggml_unary_op) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_op_desc"]
    pub fn ggml_op_desc(t: *const ggml_tensor) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_element_size"]
    pub fn ggml_element_size(tensor: *const ggml_tensor) -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_is_quantized"]
    pub fn ggml_is_quantized(type_: ggml_type) -> bool;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_ftype_to_ggml_type"]
    pub fn ggml_ftype_to_ggml_type(ftype: ggml_ftype) -> ggml_type;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_is_transposed"]
    pub fn ggml_is_transposed(tensor: *const ggml_tensor) -> bool;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_is_contiguous"]
    pub fn ggml_is_contiguous(tensor: *const ggml_tensor) -> bool;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_is_permuted"]
    pub fn ggml_is_permuted(tensor: *const ggml_tensor) -> bool;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_is_empty"]
    pub fn ggml_is_empty(tensor: *const ggml_tensor) -> bool;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_is_scalar"]
    pub fn ggml_is_scalar(tensor: *const ggml_tensor) -> bool;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_is_vector"]
    pub fn ggml_is_vector(tensor: *const ggml_tensor) -> bool;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_is_matrix"]
    pub fn ggml_is_matrix(tensor: *const ggml_tensor) -> bool;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_is_3d"]
    pub fn ggml_is_3d(tensor: *const ggml_tensor) -> bool;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_n_dims"]
    pub fn ggml_n_dims(tensor: *const ggml_tensor) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_are_same_shape"]
    pub fn ggml_are_same_shape(t0: *const ggml_tensor, t1: *const ggml_tensor) -> bool;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_tensor_overhead"]
    pub fn ggml_tensor_overhead() -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_init"]
    pub fn ggml_init(params: ggml_init_params) -> *mut ggml_context;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_free"]
    pub fn ggml_free(ctx: *mut ggml_context);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_used_mem"]
    pub fn ggml_used_mem(ctx: *const ggml_context) -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_set_scratch"]
    pub fn ggml_set_scratch(ctx: *mut ggml_context, scratch: ggml_scratch) -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_get_no_alloc"]
    pub fn ggml_get_no_alloc(ctx: *mut ggml_context) -> bool;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_set_no_alloc"]
    pub fn ggml_set_no_alloc(ctx: *mut ggml_context, no_alloc: bool);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_get_mem_buffer"]
    pub fn ggml_get_mem_buffer(ctx: *const ggml_context) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_get_mem_size"]
    pub fn ggml_get_mem_size(ctx: *const ggml_context) -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_get_max_tensor_size"]
    pub fn ggml_get_max_tensor_size(ctx: *const ggml_context) -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_new_tensor"]
    pub fn ggml_new_tensor(
        ctx: *mut ggml_context,
        type_: ggml_type,
        n_dims: ::std::os::raw::c_int,
        ne: *const i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_new_tensor_1d"]
    pub fn ggml_new_tensor_1d(
        ctx: *mut ggml_context,
        type_: ggml_type,
        ne0: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_new_tensor_2d"]
    pub fn ggml_new_tensor_2d(
        ctx: *mut ggml_context,
        type_: ggml_type,
        ne0: i64,
        ne1: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_new_tensor_3d"]
    pub fn ggml_new_tensor_3d(
        ctx: *mut ggml_context,
        type_: ggml_type,
        ne0: i64,
        ne1: i64,
        ne2: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_new_tensor_4d"]
    pub fn ggml_new_tensor_4d(
        ctx: *mut ggml_context,
        type_: ggml_type,
        ne0: i64,
        ne1: i64,
        ne2: i64,
        ne3: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_new_i32"]
    pub fn ggml_new_i32(ctx: *mut ggml_context, value: i32) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_new_f32"]
    pub fn ggml_new_f32(ctx: *mut ggml_context, value: f32) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_dup_tensor"]
    pub fn ggml_dup_tensor(ctx: *mut ggml_context, src: *const ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_view_tensor"]
    pub fn ggml_view_tensor(ctx: *mut ggml_context, src: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_get_first_tensor"]
    pub fn ggml_get_first_tensor(ctx: *const ggml_context) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_get_next_tensor"]
    pub fn ggml_get_next_tensor(
        ctx: *const ggml_context,
        tensor: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_get_tensor"]
    pub fn ggml_get_tensor(
        ctx: *mut ggml_context,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_set_zero"]
    pub fn ggml_set_zero(tensor: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_set_i32"]
    pub fn ggml_set_i32(tensor: *mut ggml_tensor, value: i32) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_set_f32"]
    pub fn ggml_set_f32(tensor: *mut ggml_tensor, value: f32) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_unravel_index"]
    pub fn ggml_unravel_index(
        tensor: *const ggml_tensor,
        i: i64,
        i0: *mut i64,
        i1: *mut i64,
        i2: *mut i64,
        i3: *mut i64,
    );
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_get_i32_1d"]
    pub fn ggml_get_i32_1d(tensor: *const ggml_tensor, i: ::std::os::raw::c_int) -> i32;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_set_i32_1d"]
    pub fn ggml_set_i32_1d(tensor: *const ggml_tensor, i: ::std::os::raw::c_int, value: i32);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_get_i32_nd"]
    pub fn ggml_get_i32_nd(
        tensor: *const ggml_tensor,
        i0: ::std::os::raw::c_int,
        i1: ::std::os::raw::c_int,
        i2: ::std::os::raw::c_int,
        i3: ::std::os::raw::c_int,
    ) -> i32;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_set_i32_nd"]
    pub fn ggml_set_i32_nd(
        tensor: *const ggml_tensor,
        i0: ::std::os::raw::c_int,
        i1: ::std::os::raw::c_int,
        i2: ::std::os::raw::c_int,
        i3: ::std::os::raw::c_int,
        value: i32,
    );
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_get_f32_1d"]
    pub fn ggml_get_f32_1d(tensor: *const ggml_tensor, i: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_set_f32_1d"]
    pub fn ggml_set_f32_1d(tensor: *const ggml_tensor, i: ::std::os::raw::c_int, value: f32);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_get_f32_nd"]
    pub fn ggml_get_f32_nd(
        tensor: *const ggml_tensor,
        i0: ::std::os::raw::c_int,
        i1: ::std::os::raw::c_int,
        i2: ::std::os::raw::c_int,
        i3: ::std::os::raw::c_int,
    ) -> f32;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_set_f32_nd"]
    pub fn ggml_set_f32_nd(
        tensor: *const ggml_tensor,
        i0: ::std::os::raw::c_int,
        i1: ::std::os::raw::c_int,
        i2: ::std::os::raw::c_int,
        i3: ::std::os::raw::c_int,
        value: f32,
    );
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_get_data"]
    pub fn ggml_get_data(tensor: *const ggml_tensor) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_get_data_f32"]
    pub fn ggml_get_data_f32(tensor: *const ggml_tensor) -> *mut f32;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_get_unary_op"]
    pub fn ggml_get_unary_op(tensor: *const ggml_tensor) -> ggml_unary_op;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_get_name"]
    pub fn ggml_get_name(tensor: *const ggml_tensor) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_set_name"]
    pub fn ggml_set_name(
        tensor: *mut ggml_tensor,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_format_name"]
    pub fn ggml_format_name(
        tensor: *mut ggml_tensor,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_dup"]
    pub fn ggml_dup(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_dup_inplace"]
    pub fn ggml_dup_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_add"]
    pub fn ggml_add(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_add_inplace"]
    pub fn ggml_add_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_add_cast"]
    pub fn ggml_add_cast(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        type_: ggml_type,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_add1"]
    pub fn ggml_add1(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_add1_inplace"]
    pub fn ggml_add1_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_acc"]
    pub fn ggml_acc(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        nb2: usize,
        nb3: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_acc_inplace"]
    pub fn ggml_acc_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        nb2: usize,
        nb3: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_sub"]
    pub fn ggml_sub(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_sub_inplace"]
    pub fn ggml_sub_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_mul"]
    pub fn ggml_mul(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_mul_inplace"]
    pub fn ggml_mul_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_div"]
    pub fn ggml_div(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_div_inplace"]
    pub fn ggml_div_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_sqr"]
    pub fn ggml_sqr(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_sqr_inplace"]
    pub fn ggml_sqr_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_sqrt"]
    pub fn ggml_sqrt(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_sqrt_inplace"]
    pub fn ggml_sqrt_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_log"]
    pub fn ggml_log(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_log_inplace"]
    pub fn ggml_log_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_sum"]
    pub fn ggml_sum(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_sum_rows"]
    pub fn ggml_sum_rows(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_mean"]
    pub fn ggml_mean(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_argmax"]
    pub fn ggml_argmax(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_repeat"]
    pub fn ggml_repeat(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_repeat_back"]
    pub fn ggml_repeat_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_concat"]
    pub fn ggml_concat(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_abs"]
    pub fn ggml_abs(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_abs_inplace"]
    pub fn ggml_abs_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_sgn"]
    pub fn ggml_sgn(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_sgn_inplace"]
    pub fn ggml_sgn_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_neg"]
    pub fn ggml_neg(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_neg_inplace"]
    pub fn ggml_neg_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_step"]
    pub fn ggml_step(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_step_inplace"]
    pub fn ggml_step_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_tanh"]
    pub fn ggml_tanh(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_tanh_inplace"]
    pub fn ggml_tanh_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_elu"]
    pub fn ggml_elu(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_elu_inplace"]
    pub fn ggml_elu_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_relu"]
    pub fn ggml_relu(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_leaky_relu"]
    pub fn ggml_leaky_relu(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        negative_slope: f32,
        inplace: bool,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_relu_inplace"]
    pub fn ggml_relu_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_gelu"]
    pub fn ggml_gelu(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_gelu_inplace"]
    pub fn ggml_gelu_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_gelu_quick"]
    pub fn ggml_gelu_quick(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_gelu_quick_inplace"]
    pub fn ggml_gelu_quick_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor)
        -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_silu"]
    pub fn ggml_silu(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_silu_inplace"]
    pub fn ggml_silu_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_silu_back"]
    pub fn ggml_silu_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_hardswish"]
    pub fn ggml_hardswish(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_hardsigmoid"]
    pub fn ggml_hardsigmoid(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_norm"]
    pub fn ggml_norm(ctx: *mut ggml_context, a: *mut ggml_tensor, eps: f32) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_norm_inplace"]
    pub fn ggml_norm_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        eps: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_rms_norm"]
    pub fn ggml_rms_norm(ctx: *mut ggml_context, a: *mut ggml_tensor, eps: f32)
        -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_rms_norm_inplace"]
    pub fn ggml_rms_norm_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        eps: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_group_norm"]
    pub fn ggml_group_norm(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_groups: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_group_norm_inplace"]
    pub fn ggml_group_norm_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_groups: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_rms_norm_back"]
    pub fn ggml_rms_norm_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        eps: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_mul_mat"]
    pub fn ggml_mul_mat(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_mul_mat_set_prec"]
    pub fn ggml_mul_mat_set_prec(a: *mut ggml_tensor, prec: ggml_prec);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_mul_mat_id"]
    pub fn ggml_mul_mat_id(
        ctx: *mut ggml_context,
        as_: *mut ggml_tensor,
        ids: *mut ggml_tensor,
        id: ::std::os::raw::c_int,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_out_prod"]
    pub fn ggml_out_prod(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_scale"]
    pub fn ggml_scale(ctx: *mut ggml_context, a: *mut ggml_tensor, s: f32) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_scale_inplace"]
    pub fn ggml_scale_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        s: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_set"]
    pub fn ggml_set(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        nb2: usize,
        nb3: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_set_inplace"]
    pub fn ggml_set_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        nb2: usize,
        nb3: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_set_1d"]
    pub fn ggml_set_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_set_1d_inplace"]
    pub fn ggml_set_1d_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_set_2d"]
    pub fn ggml_set_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_set_2d_inplace"]
    pub fn ggml_set_2d_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        nb1: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cpy"]
    pub fn ggml_cpy(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cast"]
    pub fn ggml_cast(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        type_: ggml_type,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cont"]
    pub fn ggml_cont(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cont_1d"]
    pub fn ggml_cont_1d(ctx: *mut ggml_context, a: *mut ggml_tensor, ne0: i64) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cont_2d"]
    pub fn ggml_cont_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cont_3d"]
    pub fn ggml_cont_3d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cont_4d"]
    pub fn ggml_cont_4d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
        ne3: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_reshape"]
    pub fn ggml_reshape(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_reshape_1d"]
    pub fn ggml_reshape_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_reshape_2d"]
    pub fn ggml_reshape_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_reshape_3d"]
    pub fn ggml_reshape_3d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_reshape_4d"]
    pub fn ggml_reshape_4d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
        ne3: i64,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_view_1d"]
    pub fn ggml_view_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_view_2d"]
    pub fn ggml_view_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        nb1: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_view_3d"]
    pub fn ggml_view_3d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
        nb1: usize,
        nb2: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_view_4d"]
    pub fn ggml_view_4d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        ne0: i64,
        ne1: i64,
        ne2: i64,
        ne3: i64,
        nb1: usize,
        nb2: usize,
        nb3: usize,
        offset: usize,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_permute"]
    pub fn ggml_permute(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        axis0: ::std::os::raw::c_int,
        axis1: ::std::os::raw::c_int,
        axis2: ::std::os::raw::c_int,
        axis3: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_transpose"]
    pub fn ggml_transpose(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_get_rows"]
    pub fn ggml_get_rows(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_get_rows_back"]
    pub fn ggml_get_rows_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_diag"]
    pub fn ggml_diag(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_diag_mask_inf"]
    pub fn ggml_diag_mask_inf(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_diag_mask_inf_inplace"]
    pub fn ggml_diag_mask_inf_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_diag_mask_zero"]
    pub fn ggml_diag_mask_zero(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_diag_mask_zero_inplace"]
    pub fn ggml_diag_mask_zero_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_soft_max"]
    pub fn ggml_soft_max(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_soft_max_inplace"]
    pub fn ggml_soft_max_inplace(ctx: *mut ggml_context, a: *mut ggml_tensor) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_soft_max_ext"]
    pub fn ggml_soft_max_ext(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        mask: *mut ggml_tensor,
        pos: *mut ggml_tensor,
        scale: f32,
        max_bias: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_soft_max_back"]
    pub fn ggml_soft_max_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_soft_max_back_inplace"]
    pub fn ggml_soft_max_back_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_rope"]
    pub fn ggml_rope(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        n_dims: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        n_ctx: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_rope_inplace"]
    pub fn ggml_rope_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        n_dims: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        n_ctx: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_rope_custom"]
    pub fn ggml_rope_custom(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        n_dims: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        n_ctx: ::std::os::raw::c_int,
        n_orig_ctx: ::std::os::raw::c_int,
        freq_base: f32,
        freq_scale: f32,
        ext_factor: f32,
        attn_factor: f32,
        beta_fast: f32,
        beta_slow: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_rope_custom_inplace"]
    pub fn ggml_rope_custom_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        n_dims: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        n_ctx: ::std::os::raw::c_int,
        n_orig_ctx: ::std::os::raw::c_int,
        freq_base: f32,
        freq_scale: f32,
        ext_factor: f32,
        attn_factor: f32,
        beta_fast: f32,
        beta_slow: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_rope_yarn_corr_dims"]
    pub fn ggml_rope_yarn_corr_dims(
        n_dims: ::std::os::raw::c_int,
        n_orig_ctx: ::std::os::raw::c_int,
        freq_base: f32,
        beta_fast: f32,
        beta_slow: f32,
        dims: *mut f32,
    );
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_rope_xpos_inplace"]
    pub fn ggml_rope_xpos_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        n_dims: ::std::os::raw::c_int,
        base: f32,
        down: bool,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_rope_back"]
    pub fn ggml_rope_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        n_dims: ::std::os::raw::c_int,
        mode: ::std::os::raw::c_int,
        n_ctx: ::std::os::raw::c_int,
        n_orig_ctx: ::std::os::raw::c_int,
        freq_base: f32,
        freq_scale: f32,
        ext_factor: f32,
        attn_factor: f32,
        beta_fast: f32,
        beta_slow: f32,
        xpos_base: f32,
        xpos_down: bool,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_alibi"]
    pub fn ggml_alibi(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        n_past: ::std::os::raw::c_int,
        n_head: ::std::os::raw::c_int,
        bias_max: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_clamp"]
    pub fn ggml_clamp(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        min: f32,
        max: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_im2col"]
    pub fn ggml_im2col(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::std::os::raw::c_int,
        s1: ::std::os::raw::c_int,
        p0: ::std::os::raw::c_int,
        p1: ::std::os::raw::c_int,
        d0: ::std::os::raw::c_int,
        d1: ::std::os::raw::c_int,
        is_2D: bool,
        dst_type: ggml_type,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_conv_depthwise_2d"]
    pub fn ggml_conv_depthwise_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::std::os::raw::c_int,
        s1: ::std::os::raw::c_int,
        p0: ::std::os::raw::c_int,
        p1: ::std::os::raw::c_int,
        d0: ::std::os::raw::c_int,
        d1: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_conv_1d"]
    pub fn ggml_conv_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::std::os::raw::c_int,
        p0: ::std::os::raw::c_int,
        d0: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_conv_1d_ph"]
    pub fn ggml_conv_1d_ph(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s: ::std::os::raw::c_int,
        d: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_conv_transpose_1d"]
    pub fn ggml_conv_transpose_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::std::os::raw::c_int,
        p0: ::std::os::raw::c_int,
        d0: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_conv_2d"]
    pub fn ggml_conv_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        s0: ::std::os::raw::c_int,
        s1: ::std::os::raw::c_int,
        p0: ::std::os::raw::c_int,
        p1: ::std::os::raw::c_int,
        d0: ::std::os::raw::c_int,
        d1: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_conv_2d_sk_p0"]
    pub fn ggml_conv_2d_sk_p0(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_conv_2d_s1_ph"]
    pub fn ggml_conv_2d_s1_ph(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_conv_transpose_2d_p0"]
    pub fn ggml_conv_transpose_2d_p0(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        stride: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ggml_op_pool {
    GGML_OP_POOL_MAX = 0,
    GGML_OP_POOL_AVG = 1,
    GGML_OP_POOL_COUNT = 2,
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_pool_1d"]
    pub fn ggml_pool_1d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        op: ggml_op_pool,
        k0: ::std::os::raw::c_int,
        s0: ::std::os::raw::c_int,
        p0: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_pool_2d"]
    pub fn ggml_pool_2d(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        op: ggml_op_pool,
        k0: ::std::os::raw::c_int,
        k1: ::std::os::raw::c_int,
        s0: ::std::os::raw::c_int,
        s1: ::std::os::raw::c_int,
        p0: f32,
        p1: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_upscale"]
    pub fn ggml_upscale(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        scale_factor: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_pad"]
    pub fn ggml_pad(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        p0: ::std::os::raw::c_int,
        p1: ::std::os::raw::c_int,
        p2: ::std::os::raw::c_int,
        p3: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_timestep_embedding"]
    pub fn ggml_timestep_embedding(
        ctx: *mut ggml_context,
        timesteps: *mut ggml_tensor,
        dim: ::std::os::raw::c_int,
        max_period: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ggml_sort_order {
    GGML_SORT_ORDER_ASC = 0,
    GGML_SORT_ORDER_DESC = 1,
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_argsort"]
    pub fn ggml_argsort(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        order: ggml_sort_order,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_arange"]
    pub fn ggml_arange(
        ctx: *mut ggml_context,
        start: f32,
        stop: f32,
        step: f32,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_top_k"]
    pub fn ggml_top_k(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        k: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_flash_attn"]
    pub fn ggml_flash_attn(
        ctx: *mut ggml_context,
        q: *mut ggml_tensor,
        k: *mut ggml_tensor,
        v: *mut ggml_tensor,
        masked: bool,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_flash_attn_back"]
    pub fn ggml_flash_attn_back(
        ctx: *mut ggml_context,
        q: *mut ggml_tensor,
        k: *mut ggml_tensor,
        v: *mut ggml_tensor,
        d: *mut ggml_tensor,
        masked: bool,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_flash_ff"]
    pub fn ggml_flash_ff(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b0: *mut ggml_tensor,
        b1: *mut ggml_tensor,
        c0: *mut ggml_tensor,
        c1: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_ssm_conv"]
    pub fn ggml_ssm_conv(
        ctx: *mut ggml_context,
        s: *mut ggml_tensor,
        x: *mut ggml_tensor,
        c: *mut ggml_tensor,
        sq: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_ssm_scan"]
    pub fn ggml_ssm_scan(
        ctx: *mut ggml_context,
        s: *mut ggml_tensor,
        x: *mut ggml_tensor,
        dt: *mut ggml_tensor,
        A: *mut ggml_tensor,
        B: *mut ggml_tensor,
        C: *mut ggml_tensor,
        sq: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_win_part"]
    pub fn ggml_win_part(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        w: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_win_unpart"]
    pub fn ggml_win_unpart(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        w0: ::std::os::raw::c_int,
        h0: ::std::os::raw::c_int,
        w: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_unary"]
    pub fn ggml_unary(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        op: ggml_unary_op,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_unary_inplace"]
    pub fn ggml_unary_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        op: ggml_unary_op,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_get_rel_pos"]
    pub fn ggml_get_rel_pos(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        qh: ::std::os::raw::c_int,
        kh: ::std::os::raw::c_int,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_add_rel_pos"]
    pub fn ggml_add_rel_pos(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        pw: *mut ggml_tensor,
        ph: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_add_rel_pos_inplace"]
    pub fn ggml_add_rel_pos_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        pw: *mut ggml_tensor,
        ph: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
pub type ggml_unary_op_f32_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: ::std::os::raw::c_int, arg2: *mut f32, arg3: *const f32),
>;
pub type ggml_binary_op_f32_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: *mut f32,
        arg3: *const f32,
        arg4: *const f32,
    ),
>;
pub type ggml_custom1_op_f32_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ggml_tensor, arg2: *const ggml_tensor)>;
pub type ggml_custom2_op_f32_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ggml_tensor,
        arg2: *const ggml_tensor,
        arg3: *const ggml_tensor,
    ),
>;
pub type ggml_custom3_op_f32_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ggml_tensor,
        arg2: *const ggml_tensor,
        arg3: *const ggml_tensor,
        arg4: *const ggml_tensor,
    ),
>;
extern "C" {
    #[link_name = "\u{1}llm_ggml_map_unary_f32"]
    pub fn ggml_map_unary_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        fun: ggml_unary_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_map_unary_inplace_f32"]
    pub fn ggml_map_unary_inplace_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        fun: ggml_unary_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_map_binary_f32"]
    pub fn ggml_map_binary_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        fun: ggml_binary_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_map_binary_inplace_f32"]
    pub fn ggml_map_binary_inplace_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        fun: ggml_binary_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_map_custom1_f32"]
    pub fn ggml_map_custom1_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        fun: ggml_custom1_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_map_custom1_inplace_f32"]
    pub fn ggml_map_custom1_inplace_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        fun: ggml_custom1_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_map_custom2_f32"]
    pub fn ggml_map_custom2_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        fun: ggml_custom2_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_map_custom2_inplace_f32"]
    pub fn ggml_map_custom2_inplace_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        fun: ggml_custom2_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_map_custom3_f32"]
    pub fn ggml_map_custom3_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        fun: ggml_custom3_op_f32_t,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_map_custom3_inplace_f32"]
    pub fn ggml_map_custom3_inplace_f32(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        fun: ggml_custom3_op_f32_t,
    ) -> *mut ggml_tensor;
}
pub type ggml_custom1_op_t = ::std::option::Option<
    unsafe extern "C" fn(
        dst: *mut ggml_tensor,
        a: *const ggml_tensor,
        ith: ::std::os::raw::c_int,
        nth: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type ggml_custom2_op_t = ::std::option::Option<
    unsafe extern "C" fn(
        dst: *mut ggml_tensor,
        a: *const ggml_tensor,
        b: *const ggml_tensor,
        ith: ::std::os::raw::c_int,
        nth: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
pub type ggml_custom3_op_t = ::std::option::Option<
    unsafe extern "C" fn(
        dst: *mut ggml_tensor,
        a: *const ggml_tensor,
        b: *const ggml_tensor,
        c: *const ggml_tensor,
        ith: ::std::os::raw::c_int,
        nth: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    #[link_name = "\u{1}llm_ggml_map_custom1"]
    pub fn ggml_map_custom1(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        fun: ggml_custom1_op_t,
        n_tasks: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_map_custom1_inplace"]
    pub fn ggml_map_custom1_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        fun: ggml_custom1_op_t,
        n_tasks: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_map_custom2"]
    pub fn ggml_map_custom2(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        fun: ggml_custom2_op_t,
        n_tasks: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_map_custom2_inplace"]
    pub fn ggml_map_custom2_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        fun: ggml_custom2_op_t,
        n_tasks: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_map_custom3"]
    pub fn ggml_map_custom3(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        fun: ggml_custom3_op_t,
        n_tasks: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_map_custom3_inplace"]
    pub fn ggml_map_custom3_inplace(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
        fun: ggml_custom3_op_t,
        n_tasks: ::std::os::raw::c_int,
        userdata: *mut ::std::os::raw::c_void,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cross_entropy_loss"]
    pub fn ggml_cross_entropy_loss(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cross_entropy_loss_back"]
    pub fn ggml_cross_entropy_loss_back(
        ctx: *mut ggml_context,
        a: *mut ggml_tensor,
        b: *mut ggml_tensor,
        c: *mut ggml_tensor,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_set_param"]
    pub fn ggml_set_param(ctx: *mut ggml_context, tensor: *mut ggml_tensor);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_build_forward_expand"]
    pub fn ggml_build_forward_expand(cgraph: *mut ggml_cgraph, tensor: *mut ggml_tensor);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_build_backward_expand"]
    pub fn ggml_build_backward_expand(
        ctx: *mut ggml_context,
        gf: *mut ggml_cgraph,
        gb: *mut ggml_cgraph,
        keep: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_new_graph"]
    pub fn ggml_new_graph(ctx: *mut ggml_context) -> *mut ggml_cgraph;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_new_graph_custom"]
    pub fn ggml_new_graph_custom(
        ctx: *mut ggml_context,
        size: usize,
        grads: bool,
    ) -> *mut ggml_cgraph;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_graph_dup"]
    pub fn ggml_graph_dup(ctx: *mut ggml_context, cgraph: *mut ggml_cgraph) -> *mut ggml_cgraph;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_graph_view"]
    pub fn ggml_graph_view(
        cgraph: *mut ggml_cgraph,
        i0: ::std::os::raw::c_int,
        i1: ::std::os::raw::c_int,
    ) -> ggml_cgraph;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_graph_cpy"]
    pub fn ggml_graph_cpy(src: *mut ggml_cgraph, dst: *mut ggml_cgraph);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_graph_reset"]
    pub fn ggml_graph_reset(cgraph: *mut ggml_cgraph);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_graph_clear"]
    pub fn ggml_graph_clear(cgraph: *mut ggml_cgraph);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_graph_overhead"]
    pub fn ggml_graph_overhead() -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_graph_overhead_custom"]
    pub fn ggml_graph_overhead_custom(size: usize, grads: bool) -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_graph_plan"]
    pub fn ggml_graph_plan(
        cgraph: *const ggml_cgraph,
        n_threads: ::std::os::raw::c_int,
    ) -> ggml_cplan;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_graph_compute"]
    pub fn ggml_graph_compute(cgraph: *mut ggml_cgraph, cplan: *mut ggml_cplan) -> ggml_status;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_graph_compute_with_ctx"]
    pub fn ggml_graph_compute_with_ctx(
        ctx: *mut ggml_context,
        cgraph: *mut ggml_cgraph,
        n_threads: ::std::os::raw::c_int,
    ) -> ggml_status;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_graph_get_tensor"]
    pub fn ggml_graph_get_tensor(
        cgraph: *mut ggml_cgraph,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ggml_tensor;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_graph_export"]
    pub fn ggml_graph_export(cgraph: *const ggml_cgraph, fname: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_graph_import"]
    pub fn ggml_graph_import(
        fname: *const ::std::os::raw::c_char,
        ctx_data: *mut *mut ggml_context,
        ctx_eval: *mut *mut ggml_context,
    ) -> *mut ggml_cgraph;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_graph_print"]
    pub fn ggml_graph_print(cgraph: *const ggml_cgraph);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_graph_dump_dot"]
    pub fn ggml_graph_dump_dot(
        gb: *const ggml_cgraph,
        gf: *const ggml_cgraph,
        filename: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_build_backward_gradient_checkpointing"]
    pub fn ggml_build_backward_gradient_checkpointing(
        ctx: *mut ggml_context,
        gf: *mut ggml_cgraph,
        gb: *mut ggml_cgraph,
        gb_tmp: *mut ggml_cgraph,
        checkpoints: *mut *mut ggml_tensor,
        n_checkpoints: ::std::os::raw::c_int,
    );
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ggml_opt_type {
    GGML_OPT_TYPE_ADAM = 0,
    GGML_OPT_TYPE_LBFGS = 1,
}
impl ggml_linesearch {
    pub const GGML_LINESEARCH_BACKTRACKING_WOLFE: ggml_linesearch =
        ggml_linesearch::GGML_LINESEARCH_DEFAULT;
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ggml_linesearch {
    GGML_LINESEARCH_DEFAULT = 1,
    GGML_LINESEARCH_BACKTRACKING_ARMIJO = 0,
    GGML_LINESEARCH_BACKTRACKING_STRONG_WOLFE = 2,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ggml_opt_result {
    GGML_OPT_RESULT_OK = 0,
    GGML_OPT_RESULT_DID_NOT_CONVERGE = 1,
    GGML_OPT_RESULT_NO_CONTEXT = 2,
    GGML_OPT_RESULT_INVALID_WOLFE = 3,
    GGML_OPT_RESULT_FAIL = 4,
    GGML_OPT_RESULT_CANCEL = 5,
    GGML_LINESEARCH_FAIL = -128,
    GGML_LINESEARCH_MINIMUM_STEP = -127,
    GGML_LINESEARCH_MAXIMUM_STEP = -126,
    GGML_LINESEARCH_MAXIMUM_ITERATIONS = -125,
    GGML_LINESEARCH_INVALID_PARAMETERS = -124,
}
pub type ggml_opt_callback = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        accum_step: ::std::os::raw::c_int,
        sched: *mut f32,
        cancel: *mut bool,
    ),
>;
pub type ggml_log_callback = ::std::option::Option<
    unsafe extern "C" fn(
        level: ggml_log_level,
        text: *const ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_opt_params {
    pub type_: ggml_opt_type,
    pub graph_size: usize,
    pub n_threads: ::std::os::raw::c_int,
    pub past: ::std::os::raw::c_int,
    pub delta: f32,
    pub max_no_improvement: ::std::os::raw::c_int,
    pub print_forward_graph: bool,
    pub print_backward_graph: bool,
    pub n_gradient_accumulation: ::std::os::raw::c_int,
    pub adam: ggml_opt_params__bindgen_ty_1,
    pub lbfgs: ggml_opt_params__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_opt_params__bindgen_ty_1 {
    pub n_iter: ::std::os::raw::c_int,
    pub sched: f32,
    pub decay: f32,
    pub decay_min_ndim: ::std::os::raw::c_int,
    pub alpha: f32,
    pub beta1: f32,
    pub beta2: f32,
    pub eps: f32,
    pub eps_f: f32,
    pub eps_g: f32,
    pub gclip: f32,
}
#[test]
fn bindgen_test_layout_ggml_opt_params__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_opt_params__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_opt_params__bindgen_ty_1>(),
        44usize,
        concat!("Size of: ", stringify!(ggml_opt_params__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_opt_params__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(ggml_opt_params__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_iter) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_1),
            "::",
            stringify!(n_iter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sched) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_1),
            "::",
            stringify!(sched)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decay) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_1),
            "::",
            stringify!(decay)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).decay_min_ndim) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_1),
            "::",
            stringify!(decay_min_ndim)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alpha) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_1),
            "::",
            stringify!(alpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).beta1) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_1),
            "::",
            stringify!(beta1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).beta2) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_1),
            "::",
            stringify!(beta2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eps) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_1),
            "::",
            stringify!(eps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eps_f) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_1),
            "::",
            stringify!(eps_f)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eps_g) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_1),
            "::",
            stringify!(eps_g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gclip) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_1),
            "::",
            stringify!(gclip)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_opt_params__bindgen_ty_2 {
    pub m: ::std::os::raw::c_int,
    pub n_iter: ::std::os::raw::c_int,
    pub max_linesearch: ::std::os::raw::c_int,
    pub eps: f32,
    pub ftol: f32,
    pub wolfe: f32,
    pub min_step: f32,
    pub max_step: f32,
    pub linesearch: ggml_linesearch,
}
#[test]
fn bindgen_test_layout_ggml_opt_params__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_opt_params__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_opt_params__bindgen_ty_2>(),
        36usize,
        concat!("Size of: ", stringify!(ggml_opt_params__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_opt_params__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(ggml_opt_params__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_2),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_iter) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_2),
            "::",
            stringify!(n_iter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_linesearch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_2),
            "::",
            stringify!(max_linesearch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eps) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_2),
            "::",
            stringify!(eps)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ftol) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_2),
            "::",
            stringify!(ftol)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wolfe) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_2),
            "::",
            stringify!(wolfe)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min_step) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_2),
            "::",
            stringify!(min_step)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_step) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_2),
            "::",
            stringify!(max_step)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).linesearch) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params__bindgen_ty_2),
            "::",
            stringify!(linesearch)
        )
    );
}
#[test]
fn bindgen_test_layout_ggml_opt_params() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_opt_params> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_opt_params>(),
        120usize,
        concat!("Size of: ", stringify!(ggml_opt_params))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_opt_params>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_opt_params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params),
            "::",
            stringify!(graph_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_threads) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params),
            "::",
            stringify!(n_threads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).past) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params),
            "::",
            stringify!(past)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).delta) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params),
            "::",
            stringify!(delta)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_no_improvement) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params),
            "::",
            stringify!(max_no_improvement)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).print_forward_graph) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params),
            "::",
            stringify!(print_forward_graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).print_backward_graph) as usize - ptr as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params),
            "::",
            stringify!(print_backward_graph)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_gradient_accumulation) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params),
            "::",
            stringify!(n_gradient_accumulation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adam) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params),
            "::",
            stringify!(adam)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lbfgs) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_params),
            "::",
            stringify!(lbfgs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_opt_context {
    pub ctx: *mut ggml_context,
    pub params: ggml_opt_params,
    pub iter: ::std::os::raw::c_int,
    pub nx: i64,
    pub just_initialized: bool,
    pub loss_before: f32,
    pub loss_after: f32,
    pub adam: ggml_opt_context__bindgen_ty_1,
    pub lbfgs: ggml_opt_context__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_opt_context__bindgen_ty_1 {
    pub g: *mut ggml_tensor,
    pub m: *mut ggml_tensor,
    pub v: *mut ggml_tensor,
    pub pf: *mut ggml_tensor,
    pub fx_best: f32,
    pub fx_prev: f32,
    pub n_no_improvement: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ggml_opt_context__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_opt_context__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_opt_context__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(ggml_opt_context__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_opt_context__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_opt_context__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_1),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).m) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_1),
            "::",
            stringify!(m)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_1),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pf) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_1),
            "::",
            stringify!(pf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fx_best) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_1),
            "::",
            stringify!(fx_best)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fx_prev) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_1),
            "::",
            stringify!(fx_prev)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_no_improvement) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_1),
            "::",
            stringify!(n_no_improvement)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_opt_context__bindgen_ty_2 {
    pub x: *mut ggml_tensor,
    pub xp: *mut ggml_tensor,
    pub g: *mut ggml_tensor,
    pub gp: *mut ggml_tensor,
    pub d: *mut ggml_tensor,
    pub pf: *mut ggml_tensor,
    pub lmal: *mut ggml_tensor,
    pub lmys: *mut ggml_tensor,
    pub lms: *mut ggml_tensor,
    pub lmy: *mut ggml_tensor,
    pub fx_best: f32,
    pub step: f32,
    pub j: ::std::os::raw::c_int,
    pub k: ::std::os::raw::c_int,
    pub end: ::std::os::raw::c_int,
    pub n_no_improvement: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ggml_opt_context__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_opt_context__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_opt_context__bindgen_ty_2>(),
        104usize,
        concat!("Size of: ", stringify!(ggml_opt_context__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_opt_context__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_opt_context__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).xp) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(xp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).gp) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(gp)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).d) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(d)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pf) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(pf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmal) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(lmal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmys) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(lmys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lms) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(lms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lmy) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(lmy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fx_best) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(fx_best)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).step) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(step)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).j) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(j)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).k) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(k)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).end) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_no_improvement) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context__bindgen_ty_2),
            "::",
            stringify!(n_no_improvement)
        )
    );
}
#[test]
fn bindgen_test_layout_ggml_opt_context() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_opt_context> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_opt_context>(),
        312usize,
        concat!("Size of: ", stringify!(ggml_opt_context))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_opt_context>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_opt_context))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context),
            "::",
            stringify!(ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).iter) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context),
            "::",
            stringify!(iter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nx) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context),
            "::",
            stringify!(nx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).just_initialized) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context),
            "::",
            stringify!(just_initialized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loss_before) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context),
            "::",
            stringify!(loss_before)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).loss_after) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context),
            "::",
            stringify!(loss_after)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).adam) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context),
            "::",
            stringify!(adam)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lbfgs) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_opt_context),
            "::",
            stringify!(lbfgs)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_opt_default_params"]
    pub fn ggml_opt_default_params(type_: ggml_opt_type) -> ggml_opt_params;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_opt"]
    pub fn ggml_opt(
        ctx: *mut ggml_context,
        params: ggml_opt_params,
        f: *mut ggml_tensor,
    ) -> ggml_opt_result;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_opt_init"]
    pub fn ggml_opt_init(
        ctx: *mut ggml_context,
        opt: *mut ggml_opt_context,
        params: ggml_opt_params,
        nx: i64,
    );
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_opt_resume"]
    pub fn ggml_opt_resume(
        ctx: *mut ggml_context,
        opt: *mut ggml_opt_context,
        f: *mut ggml_tensor,
    ) -> ggml_opt_result;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_opt_resume_g"]
    pub fn ggml_opt_resume_g(
        ctx: *mut ggml_context,
        opt: *mut ggml_opt_context,
        f: *mut ggml_tensor,
        gf: *mut ggml_cgraph,
        gb: *mut ggml_cgraph,
        callback: ggml_opt_callback,
        callback_data: *mut ::std::os::raw::c_void,
    ) -> ggml_opt_result;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_set_input"]
    pub fn ggml_set_input(tensor: *mut ggml_tensor);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_set_output"]
    pub fn ggml_set_output(tensor: *mut ggml_tensor);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_quantize_init"]
    pub fn ggml_quantize_init(type_: ggml_type);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_quantize_free"]
    pub fn ggml_quantize_free();
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_quantize_requires_imatrix"]
    pub fn ggml_quantize_requires_imatrix(type_: ggml_type) -> bool;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_quantize_chunk"]
    pub fn ggml_quantize_chunk(
        type_: ggml_type,
        src: *const f32,
        dst: *mut ::std::os::raw::c_void,
        start: ::std::os::raw::c_int,
        nrows: ::std::os::raw::c_int,
        n_per_row: ::std::os::raw::c_int,
        imatrix: *const f32,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cpu_has_avx"]
    pub fn ggml_cpu_has_avx() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cpu_has_avx_vnni"]
    pub fn ggml_cpu_has_avx_vnni() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cpu_has_avx2"]
    pub fn ggml_cpu_has_avx2() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cpu_has_avx512"]
    pub fn ggml_cpu_has_avx512() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cpu_has_avx512_vbmi"]
    pub fn ggml_cpu_has_avx512_vbmi() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cpu_has_avx512_vnni"]
    pub fn ggml_cpu_has_avx512_vnni() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cpu_has_fma"]
    pub fn ggml_cpu_has_fma() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cpu_has_neon"]
    pub fn ggml_cpu_has_neon() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cpu_has_arm_fma"]
    pub fn ggml_cpu_has_arm_fma() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cpu_has_metal"]
    pub fn ggml_cpu_has_metal() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cpu_has_f16c"]
    pub fn ggml_cpu_has_f16c() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cpu_has_fp16_va"]
    pub fn ggml_cpu_has_fp16_va() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cpu_has_wasm_simd"]
    pub fn ggml_cpu_has_wasm_simd() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cpu_has_blas"]
    pub fn ggml_cpu_has_blas() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cpu_has_cuda"]
    pub fn ggml_cpu_has_cuda() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cpu_has_clblast"]
    pub fn ggml_cpu_has_clblast() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cpu_has_vulkan"]
    pub fn ggml_cpu_has_vulkan() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cpu_has_kompute"]
    pub fn ggml_cpu_has_kompute() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cpu_has_gpublas"]
    pub fn ggml_cpu_has_gpublas() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cpu_has_sse3"]
    pub fn ggml_cpu_has_sse3() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cpu_has_ssse3"]
    pub fn ggml_cpu_has_ssse3() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cpu_has_sycl"]
    pub fn ggml_cpu_has_sycl() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cpu_has_vsx"]
    pub fn ggml_cpu_has_vsx() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_cpu_has_matmul_int8"]
    pub fn ggml_cpu_has_matmul_int8() -> ::std::os::raw::c_int;
}
pub type ggml_to_float_t = ::std::option::Option<
    unsafe extern "C" fn(x: *const ::std::os::raw::c_void, y: *mut f32, k: ::std::os::raw::c_int),
>;
pub type ggml_from_float_t = ::std::option::Option<
    unsafe extern "C" fn(x: *const f32, y: *mut ::std::os::raw::c_void, k: ::std::os::raw::c_int),
>;
pub type ggml_vec_dot_t = ::std::option::Option<
    unsafe extern "C" fn(
        n: ::std::os::raw::c_int,
        s: *mut f32,
        bs: usize,
        x: *const ::std::os::raw::c_void,
        bx: usize,
        y: *const ::std::os::raw::c_void,
        by: usize,
        nrc: ::std::os::raw::c_int,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_type_traits_t {
    pub type_name: *const ::std::os::raw::c_char,
    pub blck_size: ::std::os::raw::c_int,
    pub type_size: usize,
    pub is_quantized: bool,
    pub to_float: ggml_to_float_t,
    pub from_float: ggml_from_float_t,
    pub from_float_reference: ggml_from_float_t,
    pub vec_dot: ggml_vec_dot_t,
    pub vec_dot_type: ggml_type,
    pub nrows: i64,
}
#[test]
fn bindgen_test_layout_ggml_type_traits_t() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_type_traits_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_type_traits_t>(),
        80usize,
        concat!("Size of: ", stringify!(ggml_type_traits_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_type_traits_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_type_traits_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_type_traits_t),
            "::",
            stringify!(type_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blck_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_type_traits_t),
            "::",
            stringify!(blck_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_type_traits_t),
            "::",
            stringify!(type_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).is_quantized) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_type_traits_t),
            "::",
            stringify!(is_quantized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).to_float) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_type_traits_t),
            "::",
            stringify!(to_float)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from_float) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_type_traits_t),
            "::",
            stringify!(from_float)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).from_float_reference) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_type_traits_t),
            "::",
            stringify!(from_float_reference)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vec_dot) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_type_traits_t),
            "::",
            stringify!(vec_dot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vec_dot_type) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_type_traits_t),
            "::",
            stringify!(vec_dot_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nrows) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_type_traits_t),
            "::",
            stringify!(nrows)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_internal_get_type_traits"]
    pub fn ggml_internal_get_type_traits(type_: ggml_type) -> ggml_type_traits_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_backend_buffer_type {
    _unused: [u8; 0],
}
pub type ggml_backend_buffer_type_t = *mut ggml_backend_buffer_type;
pub type ggml_backend_buffer_t = *mut ggml_backend_buffer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_backend {
    _unused: [u8; 0],
}
pub type ggml_backend_t = *mut ggml_backend;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_tallocr {
    pub buffer: ggml_backend_buffer_t,
    pub base: *mut ::std::os::raw::c_void,
    pub alignment: usize,
    pub offset: usize,
}
#[test]
fn bindgen_test_layout_ggml_tallocr() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_tallocr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_tallocr>(),
        32usize,
        concat!("Size of: ", stringify!(ggml_tallocr))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_tallocr>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_tallocr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tallocr),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).base) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tallocr),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).alignment) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tallocr),
            "::",
            stringify!(alignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_tallocr),
            "::",
            stringify!(offset)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_tallocr_new"]
    pub fn ggml_tallocr_new(buffer: ggml_backend_buffer_t) -> ggml_tallocr;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_tallocr_alloc"]
    pub fn ggml_tallocr_alloc(talloc: *mut ggml_tallocr, tensor: *mut ggml_tensor);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_gallocr {
    _unused: [u8; 0],
}
pub type ggml_gallocr_t = *mut ggml_gallocr;
extern "C" {
    #[link_name = "\u{1}llm_ggml_gallocr_new"]
    pub fn ggml_gallocr_new(buft: ggml_backend_buffer_type_t) -> ggml_gallocr_t;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_gallocr_new_n"]
    pub fn ggml_gallocr_new_n(
        bufts: *mut ggml_backend_buffer_type_t,
        n_bufs: ::std::os::raw::c_int,
    ) -> ggml_gallocr_t;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_gallocr_free"]
    pub fn ggml_gallocr_free(galloc: ggml_gallocr_t);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_gallocr_reserve"]
    pub fn ggml_gallocr_reserve(galloc: ggml_gallocr_t, graph: *mut ggml_cgraph) -> bool;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_gallocr_reserve_n"]
    pub fn ggml_gallocr_reserve_n(
        galloc: ggml_gallocr_t,
        graph: *mut ggml_cgraph,
        node_buffer_ids: *const ::std::os::raw::c_int,
        leaf_buffer_ids: *const ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_gallocr_alloc_graph"]
    pub fn ggml_gallocr_alloc_graph(galloc: ggml_gallocr_t, graph: *mut ggml_cgraph) -> bool;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_gallocr_get_buffer_size"]
    pub fn ggml_gallocr_get_buffer_size(
        galloc: ggml_gallocr_t,
        buffer_id: ::std::os::raw::c_int,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_alloc_ctx_tensors_from_buft"]
    pub fn ggml_backend_alloc_ctx_tensors_from_buft(
        ctx: *mut ggml_context,
        buft: ggml_backend_buffer_type_t,
    ) -> *mut ggml_backend_buffer;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_alloc_ctx_tensors"]
    pub fn ggml_backend_alloc_ctx_tensors(
        ctx: *mut ggml_context,
        backend: ggml_backend_t,
    ) -> *mut ggml_backend_buffer;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_backend_event {
    _unused: [u8; 0],
}
pub type ggml_backend_event_t = *mut ggml_backend_event;
pub type ggml_backend_graph_plan_t = *mut ::std::os::raw::c_void;
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_buft_name"]
    pub fn ggml_backend_buft_name(
        buft: ggml_backend_buffer_type_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_buft_alloc_buffer"]
    pub fn ggml_backend_buft_alloc_buffer(
        buft: ggml_backend_buffer_type_t,
        size: usize,
    ) -> ggml_backend_buffer_t;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_buft_get_alignment"]
    pub fn ggml_backend_buft_get_alignment(buft: ggml_backend_buffer_type_t) -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_buft_get_max_size"]
    pub fn ggml_backend_buft_get_max_size(buft: ggml_backend_buffer_type_t) -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_buft_get_alloc_size"]
    pub fn ggml_backend_buft_get_alloc_size(
        buft: ggml_backend_buffer_type_t,
        tensor: *mut ggml_tensor,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_buft_supports_backend"]
    pub fn ggml_backend_buft_supports_backend(
        buft: ggml_backend_buffer_type_t,
        backend: ggml_backend_t,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_buft_is_host"]
    pub fn ggml_backend_buft_is_host(buft: ggml_backend_buffer_type_t) -> bool;
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum ggml_backend_buffer_usage {
    GGML_BACKEND_BUFFER_USAGE_ANY = 0,
    GGML_BACKEND_BUFFER_USAGE_WEIGHTS = 1,
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_buffer_name"]
    pub fn ggml_backend_buffer_name(buffer: ggml_backend_buffer_t)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_buffer_free"]
    pub fn ggml_backend_buffer_free(buffer: ggml_backend_buffer_t);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_buffer_get_base"]
    pub fn ggml_backend_buffer_get_base(
        buffer: ggml_backend_buffer_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_buffer_get_size"]
    pub fn ggml_backend_buffer_get_size(buffer: ggml_backend_buffer_t) -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_buffer_init_tensor"]
    pub fn ggml_backend_buffer_init_tensor(buffer: ggml_backend_buffer_t, tensor: *mut ggml_tensor);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_buffer_get_alignment"]
    pub fn ggml_backend_buffer_get_alignment(buffer: ggml_backend_buffer_t) -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_buffer_get_max_size"]
    pub fn ggml_backend_buffer_get_max_size(buffer: ggml_backend_buffer_t) -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_buffer_get_alloc_size"]
    pub fn ggml_backend_buffer_get_alloc_size(
        buffer: ggml_backend_buffer_t,
        tensor: *mut ggml_tensor,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_buffer_clear"]
    pub fn ggml_backend_buffer_clear(buffer: ggml_backend_buffer_t, value: u8);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_buffer_is_host"]
    pub fn ggml_backend_buffer_is_host(buffer: ggml_backend_buffer_t) -> bool;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_buffer_set_usage"]
    pub fn ggml_backend_buffer_set_usage(
        buffer: ggml_backend_buffer_t,
        usage: ggml_backend_buffer_usage,
    );
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_buffer_get_type"]
    pub fn ggml_backend_buffer_get_type(
        buffer: ggml_backend_buffer_t,
    ) -> ggml_backend_buffer_type_t;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_buffer_reset"]
    pub fn ggml_backend_buffer_reset(buffer: ggml_backend_buffer_t);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_guid"]
    pub fn ggml_backend_guid(backend: ggml_backend_t) -> ggml_guid_t;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_name"]
    pub fn ggml_backend_name(backend: ggml_backend_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_free"]
    pub fn ggml_backend_free(backend: ggml_backend_t);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_get_default_buffer_type"]
    pub fn ggml_backend_get_default_buffer_type(
        backend: ggml_backend_t,
    ) -> ggml_backend_buffer_type_t;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_alloc_buffer"]
    pub fn ggml_backend_alloc_buffer(backend: ggml_backend_t, size: usize)
        -> ggml_backend_buffer_t;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_get_alignment"]
    pub fn ggml_backend_get_alignment(backend: ggml_backend_t) -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_get_max_size"]
    pub fn ggml_backend_get_max_size(backend: ggml_backend_t) -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_tensor_set_async"]
    pub fn ggml_backend_tensor_set_async(
        backend: ggml_backend_t,
        tensor: *mut ggml_tensor,
        data: *const ::std::os::raw::c_void,
        offset: usize,
        size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_tensor_get_async"]
    pub fn ggml_backend_tensor_get_async(
        backend: ggml_backend_t,
        tensor: *const ggml_tensor,
        data: *mut ::std::os::raw::c_void,
        offset: usize,
        size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_tensor_set"]
    pub fn ggml_backend_tensor_set(
        tensor: *mut ggml_tensor,
        data: *const ::std::os::raw::c_void,
        offset: usize,
        size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_tensor_get"]
    pub fn ggml_backend_tensor_get(
        tensor: *const ggml_tensor,
        data: *mut ::std::os::raw::c_void,
        offset: usize,
        size: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_synchronize"]
    pub fn ggml_backend_synchronize(backend: ggml_backend_t);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_graph_plan_create"]
    pub fn ggml_backend_graph_plan_create(
        backend: ggml_backend_t,
        cgraph: *mut ggml_cgraph,
    ) -> ggml_backend_graph_plan_t;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_graph_plan_free"]
    pub fn ggml_backend_graph_plan_free(backend: ggml_backend_t, plan: ggml_backend_graph_plan_t);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_graph_plan_compute"]
    pub fn ggml_backend_graph_plan_compute(
        backend: ggml_backend_t,
        plan: ggml_backend_graph_plan_t,
    ) -> ggml_status;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_graph_compute"]
    pub fn ggml_backend_graph_compute(
        backend: ggml_backend_t,
        cgraph: *mut ggml_cgraph,
    ) -> ggml_status;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_graph_compute_async"]
    pub fn ggml_backend_graph_compute_async(
        backend: ggml_backend_t,
        cgraph: *mut ggml_cgraph,
    ) -> ggml_status;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_supports_op"]
    pub fn ggml_backend_supports_op(backend: ggml_backend_t, op: *const ggml_tensor) -> bool;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_offload_op"]
    pub fn ggml_backend_offload_op(backend: ggml_backend_t, op: *const ggml_tensor) -> bool;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_tensor_copy"]
    pub fn ggml_backend_tensor_copy(src: *mut ggml_tensor, dst: *mut ggml_tensor);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_tensor_copy_async"]
    pub fn ggml_backend_tensor_copy_async(
        backend_src: ggml_backend_t,
        backend_dst: ggml_backend_t,
        src: *mut ggml_tensor,
        dst: *mut ggml_tensor,
    );
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_event_new"]
    pub fn ggml_backend_event_new(backend: ggml_backend_t) -> ggml_backend_event_t;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_event_free"]
    pub fn ggml_backend_event_free(event: ggml_backend_event_t);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_event_record"]
    pub fn ggml_backend_event_record(event: ggml_backend_event_t);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_event_synchronize"]
    pub fn ggml_backend_event_synchronize(event: ggml_backend_event_t);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_event_wait"]
    pub fn ggml_backend_event_wait(backend: ggml_backend_t, event: ggml_backend_event_t);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_cpu_init"]
    pub fn ggml_backend_cpu_init() -> ggml_backend_t;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_is_cpu"]
    pub fn ggml_backend_is_cpu(backend: ggml_backend_t) -> bool;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_cpu_set_n_threads"]
    pub fn ggml_backend_cpu_set_n_threads(
        backend_cpu: ggml_backend_t,
        n_threads: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_cpu_set_abort_callback"]
    pub fn ggml_backend_cpu_set_abort_callback(
        backend_cpu: ggml_backend_t,
        abort_callback: ggml_abort_callback,
        abort_callback_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_cpu_buffer_from_ptr"]
    pub fn ggml_backend_cpu_buffer_from_ptr(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> ggml_backend_buffer_t;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_cpu_buffer_type"]
    pub fn ggml_backend_cpu_buffer_type() -> ggml_backend_buffer_type_t;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_reg_get_count"]
    pub fn ggml_backend_reg_get_count() -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_reg_find_by_name"]
    pub fn ggml_backend_reg_find_by_name(name: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_reg_init_backend_from_str"]
    pub fn ggml_backend_reg_init_backend_from_str(
        backend_str: *const ::std::os::raw::c_char,
    ) -> ggml_backend_t;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_reg_get_name"]
    pub fn ggml_backend_reg_get_name(i: usize) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_reg_init_backend"]
    pub fn ggml_backend_reg_init_backend(
        i: usize,
        params: *const ::std::os::raw::c_char,
    ) -> ggml_backend_t;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_reg_get_default_buffer_type"]
    pub fn ggml_backend_reg_get_default_buffer_type(i: usize) -> ggml_backend_buffer_type_t;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_reg_alloc_buffer"]
    pub fn ggml_backend_reg_alloc_buffer(i: usize, size: usize) -> ggml_backend_buffer_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ggml_backend_sched {
    _unused: [u8; 0],
}
pub type ggml_backend_sched_t = *mut ggml_backend_sched;
pub type ggml_backend_sched_eval_callback = ::std::option::Option<
    unsafe extern "C" fn(
        t: *mut ggml_tensor,
        ask: bool,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_sched_new"]
    pub fn ggml_backend_sched_new(
        backends: *mut ggml_backend_t,
        bufts: *mut ggml_backend_buffer_type_t,
        n_backends: ::std::os::raw::c_int,
        graph_size: usize,
        parallel: bool,
    ) -> ggml_backend_sched_t;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_sched_free"]
    pub fn ggml_backend_sched_free(sched: ggml_backend_sched_t);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_sched_reserve"]
    pub fn ggml_backend_sched_reserve(
        sched: ggml_backend_sched_t,
        measure_graph: *mut ggml_cgraph,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_sched_get_n_splits"]
    pub fn ggml_backend_sched_get_n_splits(sched: ggml_backend_sched_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_sched_get_n_copies"]
    pub fn ggml_backend_sched_get_n_copies(sched: ggml_backend_sched_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_sched_get_buffer_size"]
    pub fn ggml_backend_sched_get_buffer_size(
        sched: ggml_backend_sched_t,
        backend: ggml_backend_t,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_sched_set_tensor_backend"]
    pub fn ggml_backend_sched_set_tensor_backend(
        sched: ggml_backend_sched_t,
        node: *mut ggml_tensor,
        backend: ggml_backend_t,
    );
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_sched_get_tensor_backend"]
    pub fn ggml_backend_sched_get_tensor_backend(
        sched: ggml_backend_sched_t,
        node: *mut ggml_tensor,
    ) -> ggml_backend_t;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_sched_alloc_graph"]
    pub fn ggml_backend_sched_alloc_graph(
        sched: ggml_backend_sched_t,
        graph: *mut ggml_cgraph,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_sched_graph_compute"]
    pub fn ggml_backend_sched_graph_compute(
        sched: ggml_backend_sched_t,
        graph: *mut ggml_cgraph,
    ) -> ggml_status;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_sched_graph_compute_async"]
    pub fn ggml_backend_sched_graph_compute_async(
        sched: ggml_backend_sched_t,
        graph: *mut ggml_cgraph,
    ) -> ggml_status;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_sched_synchronize"]
    pub fn ggml_backend_sched_synchronize(sched: ggml_backend_sched_t);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_sched_reset"]
    pub fn ggml_backend_sched_reset(sched: ggml_backend_sched_t);
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_sched_set_eval_callback"]
    pub fn ggml_backend_sched_set_eval_callback(
        sched: ggml_backend_sched_t,
        callback: ggml_backend_sched_eval_callback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_backend_graph_copy {
    pub buffer: ggml_backend_buffer_t,
    pub ctx_allocated: *mut ggml_context,
    pub ctx_unallocated: *mut ggml_context,
    pub graph: *mut ggml_cgraph,
}
#[test]
fn bindgen_test_layout_ggml_backend_graph_copy() {
    const UNINIT: ::std::mem::MaybeUninit<ggml_backend_graph_copy> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ggml_backend_graph_copy>(),
        32usize,
        concat!("Size of: ", stringify!(ggml_backend_graph_copy))
    );
    assert_eq!(
        ::std::mem::align_of::<ggml_backend_graph_copy>(),
        8usize,
        concat!("Alignment of ", stringify!(ggml_backend_graph_copy))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).buffer) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_backend_graph_copy),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx_allocated) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_backend_graph_copy),
            "::",
            stringify!(ctx_allocated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctx_unallocated) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_backend_graph_copy),
            "::",
            stringify!(ctx_unallocated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).graph) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ggml_backend_graph_copy),
            "::",
            stringify!(graph)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_graph_copy"]
    pub fn ggml_backend_graph_copy(
        backend: ggml_backend_t,
        graph: *mut ggml_cgraph,
    ) -> ggml_backend_graph_copy;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_graph_copy_free"]
    pub fn ggml_backend_graph_copy_free(copy: ggml_backend_graph_copy);
}
pub type ggml_backend_eval_callback = ::std::option::Option<
    unsafe extern "C" fn(
        node_index: ::std::os::raw::c_int,
        t1: *mut ggml_tensor,
        t2: *mut ggml_tensor,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_compare_graph_backend"]
    pub fn ggml_backend_compare_graph_backend(
        backend1: ggml_backend_t,
        backend2: ggml_backend_t,
        graph: *mut ggml_cgraph,
        callback: ggml_backend_eval_callback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_tensor_alloc"]
    pub fn ggml_backend_tensor_alloc(
        buffer: ggml_backend_buffer_t,
        tensor: *mut ggml_tensor,
        addr: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}llm_ggml_backend_view_init"]
    pub fn ggml_backend_view_init(buffer: ggml_backend_buffer_t, tensor: *mut ggml_tensor);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_model {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_context {
    _unused: [u8; 0],
}
pub type llama_pos = i32;
pub type llama_token = i32;
pub type llama_seq_id = i32;
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum llama_vocab_type {
    LLAMA_VOCAB_TYPE_NONE = 0,
    LLAMA_VOCAB_TYPE_SPM = 1,
    LLAMA_VOCAB_TYPE_BPE = 2,
    LLAMA_VOCAB_TYPE_WPM = 3,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum llama_rope_type {
    LLAMA_ROPE_TYPE_NONE = -1,
    LLAMA_ROPE_TYPE_NORM = 0,
    LLAMA_ROPE_TYPE_NEOX = 2,
    LLAMA_ROPE_TYPE_GLM = 4,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum llama_token_type {
    LLAMA_TOKEN_TYPE_UNDEFINED = 0,
    LLAMA_TOKEN_TYPE_NORMAL = 1,
    LLAMA_TOKEN_TYPE_UNKNOWN = 2,
    LLAMA_TOKEN_TYPE_CONTROL = 3,
    LLAMA_TOKEN_TYPE_USER_DEFINED = 4,
    LLAMA_TOKEN_TYPE_UNUSED = 5,
    LLAMA_TOKEN_TYPE_BYTE = 6,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum llama_ftype {
    LLAMA_FTYPE_ALL_F32 = 0,
    LLAMA_FTYPE_MOSTLY_F16 = 1,
    LLAMA_FTYPE_MOSTLY_Q4_0 = 2,
    LLAMA_FTYPE_MOSTLY_Q4_1 = 3,
    LLAMA_FTYPE_MOSTLY_Q4_1_SOME_F16 = 4,
    LLAMA_FTYPE_MOSTLY_Q8_0 = 7,
    LLAMA_FTYPE_MOSTLY_Q5_0 = 8,
    LLAMA_FTYPE_MOSTLY_Q5_1 = 9,
    LLAMA_FTYPE_MOSTLY_Q2_K = 10,
    LLAMA_FTYPE_MOSTLY_Q3_K_S = 11,
    LLAMA_FTYPE_MOSTLY_Q3_K_M = 12,
    LLAMA_FTYPE_MOSTLY_Q3_K_L = 13,
    LLAMA_FTYPE_MOSTLY_Q4_K_S = 14,
    LLAMA_FTYPE_MOSTLY_Q4_K_M = 15,
    LLAMA_FTYPE_MOSTLY_Q5_K_S = 16,
    LLAMA_FTYPE_MOSTLY_Q5_K_M = 17,
    LLAMA_FTYPE_MOSTLY_Q6_K = 18,
    LLAMA_FTYPE_MOSTLY_IQ2_XXS = 19,
    LLAMA_FTYPE_MOSTLY_IQ2_XS = 20,
    LLAMA_FTYPE_MOSTLY_Q2_K_S = 21,
    LLAMA_FTYPE_MOSTLY_IQ3_XS = 22,
    LLAMA_FTYPE_MOSTLY_IQ3_XXS = 23,
    LLAMA_FTYPE_MOSTLY_IQ1_S = 24,
    LLAMA_FTYPE_MOSTLY_IQ4_NL = 25,
    LLAMA_FTYPE_MOSTLY_IQ3_S = 26,
    LLAMA_FTYPE_MOSTLY_IQ3_M = 27,
    LLAMA_FTYPE_MOSTLY_IQ2_S = 28,
    LLAMA_FTYPE_MOSTLY_IQ2_M = 29,
    LLAMA_FTYPE_MOSTLY_IQ4_XS = 30,
    LLAMA_FTYPE_MOSTLY_IQ1_M = 31,
    LLAMA_FTYPE_GUESSED = 1024,
}
impl llama_rope_scaling_type {
    pub const LLAMA_ROPE_SCALING_TYPE_MAX_VALUE: llama_rope_scaling_type =
        llama_rope_scaling_type::LLAMA_ROPE_SCALING_TYPE_YARN;
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum llama_rope_scaling_type {
    LLAMA_ROPE_SCALING_TYPE_UNSPECIFIED = -1,
    LLAMA_ROPE_SCALING_TYPE_NONE = 0,
    LLAMA_ROPE_SCALING_TYPE_LINEAR = 1,
    LLAMA_ROPE_SCALING_TYPE_YARN = 2,
}
#[repr(i32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum llama_pooling_type {
    LLAMA_POOLING_TYPE_UNSPECIFIED = -1,
    LLAMA_POOLING_TYPE_NONE = 0,
    LLAMA_POOLING_TYPE_MEAN = 1,
    LLAMA_POOLING_TYPE_CLS = 2,
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum llama_split_mode {
    LLAMA_SPLIT_MODE_NONE = 0,
    LLAMA_SPLIT_MODE_LAYER = 1,
    LLAMA_SPLIT_MODE_ROW = 2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_token_data {
    pub id: llama_token,
    pub logit: f32,
    pub p: f32,
}
#[test]
fn bindgen_test_layout_llama_token_data() {
    const UNINIT: ::std::mem::MaybeUninit<llama_token_data> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<llama_token_data>(),
        12usize,
        concat!("Size of: ", stringify!(llama_token_data))
    );
    assert_eq!(
        ::std::mem::align_of::<llama_token_data>(),
        4usize,
        concat!("Alignment of ", stringify!(llama_token_data))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_token_data),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logit) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_token_data),
            "::",
            stringify!(logit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_token_data),
            "::",
            stringify!(p)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_token_data_array {
    pub data: *mut llama_token_data,
    pub size: usize,
    pub sorted: bool,
}
#[test]
fn bindgen_test_layout_llama_token_data_array() {
    const UNINIT: ::std::mem::MaybeUninit<llama_token_data_array> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<llama_token_data_array>(),
        24usize,
        concat!("Size of: ", stringify!(llama_token_data_array))
    );
    assert_eq!(
        ::std::mem::align_of::<llama_token_data_array>(),
        8usize,
        concat!("Alignment of ", stringify!(llama_token_data_array))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_token_data_array),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_token_data_array),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sorted) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_token_data_array),
            "::",
            stringify!(sorted)
        )
    );
}
pub type llama_progress_callback = ::std::option::Option<
    unsafe extern "C" fn(progress: f32, ctx: *mut ::std::os::raw::c_void) -> bool,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_batch {
    pub n_tokens: i32,
    pub token: *mut llama_token,
    pub embd: *mut f32,
    pub pos: *mut llama_pos,
    pub n_seq_id: *mut i32,
    pub seq_id: *mut *mut llama_seq_id,
    pub logits: *mut i8,
    pub all_pos_0: llama_pos,
    pub all_pos_1: llama_pos,
    pub all_seq_id: llama_seq_id,
}
#[test]
fn bindgen_test_layout_llama_batch() {
    const UNINIT: ::std::mem::MaybeUninit<llama_batch> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<llama_batch>(),
        72usize,
        concat!("Size of: ", stringify!(llama_batch))
    );
    assert_eq!(
        ::std::mem::align_of::<llama_batch>(),
        8usize,
        concat!("Alignment of ", stringify!(llama_batch))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_tokens) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_batch),
            "::",
            stringify!(n_tokens)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_batch),
            "::",
            stringify!(token)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).embd) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_batch),
            "::",
            stringify!(embd)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_batch),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_seq_id) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_batch),
            "::",
            stringify!(n_seq_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seq_id) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_batch),
            "::",
            stringify!(seq_id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logits) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_batch),
            "::",
            stringify!(logits)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).all_pos_0) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_batch),
            "::",
            stringify!(all_pos_0)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).all_pos_1) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_batch),
            "::",
            stringify!(all_pos_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).all_seq_id) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_batch),
            "::",
            stringify!(all_seq_id)
        )
    );
}
#[repr(u32)]
#[non_exhaustive]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum llama_model_kv_override_type {
    LLAMA_KV_OVERRIDE_TYPE_INT = 0,
    LLAMA_KV_OVERRIDE_TYPE_FLOAT = 1,
    LLAMA_KV_OVERRIDE_TYPE_BOOL = 2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct llama_model_kv_override {
    pub key: [::std::os::raw::c_char; 128usize],
    pub tag: llama_model_kv_override_type,
    pub __bindgen_anon_1: llama_model_kv_override__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union llama_model_kv_override__bindgen_ty_1 {
    pub int_value: i64,
    pub float_value: f64,
    pub bool_value: bool,
}
#[test]
fn bindgen_test_layout_llama_model_kv_override__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<llama_model_kv_override__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<llama_model_kv_override__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(llama_model_kv_override__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<llama_model_kv_override__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(llama_model_kv_override__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).int_value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_kv_override__bindgen_ty_1),
            "::",
            stringify!(int_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).float_value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_kv_override__bindgen_ty_1),
            "::",
            stringify!(float_value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bool_value) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_kv_override__bindgen_ty_1),
            "::",
            stringify!(bool_value)
        )
    );
}
#[test]
fn bindgen_test_layout_llama_model_kv_override() {
    const UNINIT: ::std::mem::MaybeUninit<llama_model_kv_override> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<llama_model_kv_override>(),
        144usize,
        concat!("Size of: ", stringify!(llama_model_kv_override))
    );
    assert_eq!(
        ::std::mem::align_of::<llama_model_kv_override>(),
        8usize,
        concat!("Alignment of ", stringify!(llama_model_kv_override))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).key) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_kv_override),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tag) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_kv_override),
            "::",
            stringify!(tag)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_model_params {
    pub n_gpu_layers: i32,
    pub split_mode: llama_split_mode,
    pub main_gpu: i32,
    pub tensor_split: *const f32,
    pub progress_callback: llama_progress_callback,
    pub progress_callback_user_data: *mut ::std::os::raw::c_void,
    pub kv_overrides: *const llama_model_kv_override,
    pub vocab_only: bool,
    pub use_mmap: bool,
    pub use_mlock: bool,
}
#[test]
fn bindgen_test_layout_llama_model_params() {
    const UNINIT: ::std::mem::MaybeUninit<llama_model_params> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<llama_model_params>(),
        56usize,
        concat!("Size of: ", stringify!(llama_model_params))
    );
    assert_eq!(
        ::std::mem::align_of::<llama_model_params>(),
        8usize,
        concat!("Alignment of ", stringify!(llama_model_params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_gpu_layers) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_params),
            "::",
            stringify!(n_gpu_layers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).split_mode) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_params),
            "::",
            stringify!(split_mode)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).main_gpu) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_params),
            "::",
            stringify!(main_gpu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tensor_split) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_params),
            "::",
            stringify!(tensor_split)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progress_callback) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_params),
            "::",
            stringify!(progress_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).progress_callback_user_data) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_params),
            "::",
            stringify!(progress_callback_user_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kv_overrides) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_params),
            "::",
            stringify!(kv_overrides)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vocab_only) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_params),
            "::",
            stringify!(vocab_only)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_mmap) as usize - ptr as usize },
        49usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_params),
            "::",
            stringify!(use_mmap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).use_mlock) as usize - ptr as usize },
        50usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_params),
            "::",
            stringify!(use_mlock)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_context_params {
    pub seed: u32,
    pub n_ctx: u32,
    pub n_batch: u32,
    pub n_ubatch: u32,
    pub n_seq_max: u32,
    pub n_threads: u32,
    pub n_threads_batch: u32,
    pub rope_scaling_type: llama_rope_scaling_type,
    pub pooling_type: llama_pooling_type,
    pub rope_freq_base: f32,
    pub rope_freq_scale: f32,
    pub yarn_ext_factor: f32,
    pub yarn_attn_factor: f32,
    pub yarn_beta_fast: f32,
    pub yarn_beta_slow: f32,
    pub yarn_orig_ctx: u32,
    pub defrag_thold: f32,
    pub cb_eval: ggml_backend_sched_eval_callback,
    pub cb_eval_user_data: *mut ::std::os::raw::c_void,
    pub type_k: ggml_type,
    pub type_v: ggml_type,
    pub logits_all: bool,
    pub embeddings: bool,
    pub offload_kqv: bool,
    pub abort_callback: ggml_abort_callback,
    pub abort_callback_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_llama_context_params() {
    const UNINIT: ::std::mem::MaybeUninit<llama_context_params> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<llama_context_params>(),
        120usize,
        concat!("Size of: ", stringify!(llama_context_params))
    );
    assert_eq!(
        ::std::mem::align_of::<llama_context_params>(),
        8usize,
        concat!("Alignment of ", stringify!(llama_context_params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).seed) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(seed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_ctx) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(n_ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_batch) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(n_batch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_ubatch) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(n_ubatch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_seq_max) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(n_seq_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_threads) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(n_threads)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_threads_batch) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(n_threads_batch)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rope_scaling_type) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(rope_scaling_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pooling_type) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(pooling_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rope_freq_base) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(rope_freq_base)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rope_freq_scale) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(rope_freq_scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yarn_ext_factor) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(yarn_ext_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yarn_attn_factor) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(yarn_attn_factor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yarn_beta_fast) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(yarn_beta_fast)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yarn_beta_slow) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(yarn_beta_slow)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).yarn_orig_ctx) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(yarn_orig_ctx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).defrag_thold) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(defrag_thold)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_eval) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(cb_eval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cb_eval_user_data) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(cb_eval_user_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_k) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(type_k)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_v) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(type_v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).logits_all) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(logits_all)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).embeddings) as usize - ptr as usize },
        97usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(embeddings)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offload_kqv) as usize - ptr as usize },
        98usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(offload_kqv)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abort_callback) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(abort_callback)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).abort_callback_data) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_context_params),
            "::",
            stringify!(abort_callback_data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_model_quantize_params {
    pub nthread: i32,
    pub ftype: llama_ftype,
    pub output_tensor_type: ggml_type,
    pub token_embedding_type: ggml_type,
    pub allow_requantize: bool,
    pub quantize_output_tensor: bool,
    pub only_copy: bool,
    pub pure_: bool,
    pub imatrix: *mut ::std::os::raw::c_void,
    pub kv_overrides: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_llama_model_quantize_params() {
    const UNINIT: ::std::mem::MaybeUninit<llama_model_quantize_params> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<llama_model_quantize_params>(),
        40usize,
        concat!("Size of: ", stringify!(llama_model_quantize_params))
    );
    assert_eq!(
        ::std::mem::align_of::<llama_model_quantize_params>(),
        8usize,
        concat!("Alignment of ", stringify!(llama_model_quantize_params))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nthread) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_quantize_params),
            "::",
            stringify!(nthread)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ftype) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_quantize_params),
            "::",
            stringify!(ftype)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).output_tensor_type) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_quantize_params),
            "::",
            stringify!(output_tensor_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token_embedding_type) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_quantize_params),
            "::",
            stringify!(token_embedding_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).allow_requantize) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_quantize_params),
            "::",
            stringify!(allow_requantize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).quantize_output_tensor) as usize - ptr as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_quantize_params),
            "::",
            stringify!(quantize_output_tensor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).only_copy) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_quantize_params),
            "::",
            stringify!(only_copy)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pure_) as usize - ptr as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_quantize_params),
            "::",
            stringify!(pure_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imatrix) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_quantize_params),
            "::",
            stringify!(imatrix)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).kv_overrides) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_model_quantize_params),
            "::",
            stringify!(kv_overrides)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llama_grammar {
    _unused: [u8; 0],
}
pub const llama_gretype_LLAMA_GRETYPE_END: llama_gretype = 0;
pub const llama_gretype_LLAMA_GRETYPE_ALT: llama_gretype = 1;
pub const llama_gretype_LLAMA_GRETYPE_RULE_REF: llama_gretype = 2;
pub const llama_gretype_LLAMA_GRETYPE_CHAR: llama_gretype = 3;
pub const llama_gretype_LLAMA_GRETYPE_CHAR_NOT: llama_gretype = 4;
pub const llama_gretype_LLAMA_GRETYPE_CHAR_RNG_UPPER: llama_gretype = 5;
pub const llama_gretype_LLAMA_GRETYPE_CHAR_ALT: llama_gretype = 6;
pub type llama_gretype = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_grammar_element {
    pub type_: llama_gretype,
    pub value: u32,
}
#[test]
fn bindgen_test_layout_llama_grammar_element() {
    const UNINIT: ::std::mem::MaybeUninit<llama_grammar_element> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<llama_grammar_element>(),
        8usize,
        concat!("Size of: ", stringify!(llama_grammar_element))
    );
    assert_eq!(
        ::std::mem::align_of::<llama_grammar_element>(),
        4usize,
        concat!("Alignment of ", stringify!(llama_grammar_element))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_grammar_element),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_grammar_element),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_timings {
    pub t_start_ms: f64,
    pub t_end_ms: f64,
    pub t_load_ms: f64,
    pub t_sample_ms: f64,
    pub t_p_eval_ms: f64,
    pub t_eval_ms: f64,
    pub n_sample: i32,
    pub n_p_eval: i32,
    pub n_eval: i32,
}
#[test]
fn bindgen_test_layout_llama_timings() {
    const UNINIT: ::std::mem::MaybeUninit<llama_timings> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<llama_timings>(),
        64usize,
        concat!("Size of: ", stringify!(llama_timings))
    );
    assert_eq!(
        ::std::mem::align_of::<llama_timings>(),
        8usize,
        concat!("Alignment of ", stringify!(llama_timings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_start_ms) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_timings),
            "::",
            stringify!(t_start_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_end_ms) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_timings),
            "::",
            stringify!(t_end_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_load_ms) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_timings),
            "::",
            stringify!(t_load_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_sample_ms) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_timings),
            "::",
            stringify!(t_sample_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_p_eval_ms) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_timings),
            "::",
            stringify!(t_p_eval_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).t_eval_ms) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_timings),
            "::",
            stringify!(t_eval_ms)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_sample) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_timings),
            "::",
            stringify!(n_sample)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_p_eval) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_timings),
            "::",
            stringify!(n_p_eval)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_eval) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_timings),
            "::",
            stringify!(n_eval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_chat_message {
    pub role: *const ::std::os::raw::c_char,
    pub content: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_llama_chat_message() {
    const UNINIT: ::std::mem::MaybeUninit<llama_chat_message> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<llama_chat_message>(),
        16usize,
        concat!("Size of: ", stringify!(llama_chat_message))
    );
    assert_eq!(
        ::std::mem::align_of::<llama_chat_message>(),
        8usize,
        concat!("Alignment of ", stringify!(llama_chat_message))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).role) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_chat_message),
            "::",
            stringify!(role)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).content) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_chat_message),
            "::",
            stringify!(content)
        )
    );
}
extern "C" {
    pub fn llama_model_default_params() -> llama_model_params;
}
extern "C" {
    pub fn llama_context_default_params() -> llama_context_params;
}
extern "C" {
    pub fn llama_model_quantize_default_params() -> llama_model_quantize_params;
}
extern "C" {
    pub fn llama_backend_init();
}
extern "C" {
    pub fn llama_numa_init(numa: ggml_numa_strategy);
}
extern "C" {
    pub fn llama_backend_free();
}
extern "C" {
    pub fn llama_load_model_from_file(
        path_model: *const ::std::os::raw::c_char,
        params: llama_model_params,
    ) -> *mut llama_model;
}
extern "C" {
    pub fn llama_free_model(model: *mut llama_model);
}
extern "C" {
    pub fn llama_new_context_with_model(
        model: *mut llama_model,
        params: llama_context_params,
    ) -> *mut llama_context;
}
extern "C" {
    pub fn llama_free(ctx: *mut llama_context);
}
extern "C" {
    pub fn llama_time_us() -> i64;
}
extern "C" {
    pub fn llama_max_devices() -> usize;
}
extern "C" {
    pub fn llama_supports_mmap() -> bool;
}
extern "C" {
    pub fn llama_supports_mlock() -> bool;
}
extern "C" {
    pub fn llama_supports_gpu_offload() -> bool;
}
extern "C" {
    pub fn llama_get_model(ctx: *const llama_context) -> *const llama_model;
}
extern "C" {
    pub fn llama_n_ctx(ctx: *const llama_context) -> u32;
}
extern "C" {
    pub fn llama_n_batch(ctx: *const llama_context) -> u32;
}
extern "C" {
    pub fn llama_n_ubatch(ctx: *const llama_context) -> u32;
}
extern "C" {
    pub fn llama_n_seq_max(ctx: *const llama_context) -> u32;
}
extern "C" {
    pub fn llama_vocab_type(model: *const llama_model) -> llama_vocab_type;
}
extern "C" {
    pub fn llama_rope_type(model: *const llama_model) -> llama_rope_type;
}
extern "C" {
    pub fn llama_n_vocab(model: *const llama_model) -> i32;
}
extern "C" {
    pub fn llama_n_ctx_train(model: *const llama_model) -> i32;
}
extern "C" {
    pub fn llama_n_embd(model: *const llama_model) -> i32;
}
extern "C" {
    pub fn llama_n_layer(model: *const llama_model) -> i32;
}
extern "C" {
    pub fn llama_rope_freq_scale_train(model: *const llama_model) -> f32;
}
extern "C" {
    pub fn llama_model_meta_val_str(
        model: *const llama_model,
        key: *const ::std::os::raw::c_char,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
    ) -> i32;
}
extern "C" {
    pub fn llama_model_meta_count(model: *const llama_model) -> i32;
}
extern "C" {
    pub fn llama_model_meta_key_by_index(
        model: *const llama_model,
        i: i32,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
    ) -> i32;
}
extern "C" {
    pub fn llama_model_meta_val_str_by_index(
        model: *const llama_model,
        i: i32,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
    ) -> i32;
}
extern "C" {
    pub fn llama_model_desc(
        model: *const llama_model,
        buf: *mut ::std::os::raw::c_char,
        buf_size: usize,
    ) -> i32;
}
extern "C" {
    pub fn llama_model_size(model: *const llama_model) -> u64;
}
extern "C" {
    pub fn llama_model_n_params(model: *const llama_model) -> u64;
}
extern "C" {
    pub fn llama_get_model_tensor(
        model: *mut llama_model,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ggml_tensor;
}
extern "C" {
    pub fn llama_model_quantize(
        fname_inp: *const ::std::os::raw::c_char,
        fname_out: *const ::std::os::raw::c_char,
        params: *const llama_model_quantize_params,
    ) -> u32;
}
extern "C" {
    pub fn llama_model_apply_lora_from_file(
        model: *const llama_model,
        path_lora: *const ::std::os::raw::c_char,
        scale: f32,
        path_base_model: *const ::std::os::raw::c_char,
        n_threads: i32,
    ) -> i32;
}
extern "C" {
    pub fn llama_control_vector_apply(
        lctx: *mut llama_context,
        data: *const f32,
        len: usize,
        n_embd: i32,
        il_start: i32,
        il_end: i32,
    ) -> i32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_kv_cache_view_cell {
    pub pos: llama_pos,
}
#[test]
fn bindgen_test_layout_llama_kv_cache_view_cell() {
    const UNINIT: ::std::mem::MaybeUninit<llama_kv_cache_view_cell> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<llama_kv_cache_view_cell>(),
        4usize,
        concat!("Size of: ", stringify!(llama_kv_cache_view_cell))
    );
    assert_eq!(
        ::std::mem::align_of::<llama_kv_cache_view_cell>(),
        4usize,
        concat!("Alignment of ", stringify!(llama_kv_cache_view_cell))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_kv_cache_view_cell),
            "::",
            stringify!(pos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_kv_cache_view {
    pub n_cells: i32,
    pub n_seq_max: i32,
    pub token_count: i32,
    pub used_cells: i32,
    pub max_contiguous: i32,
    pub max_contiguous_idx: i32,
    pub cells: *mut llama_kv_cache_view_cell,
    pub cells_sequences: *mut llama_seq_id,
}
#[test]
fn bindgen_test_layout_llama_kv_cache_view() {
    const UNINIT: ::std::mem::MaybeUninit<llama_kv_cache_view> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<llama_kv_cache_view>(),
        40usize,
        concat!("Size of: ", stringify!(llama_kv_cache_view))
    );
    assert_eq!(
        ::std::mem::align_of::<llama_kv_cache_view>(),
        8usize,
        concat!("Alignment of ", stringify!(llama_kv_cache_view))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_cells) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_kv_cache_view),
            "::",
            stringify!(n_cells)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_seq_max) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_kv_cache_view),
            "::",
            stringify!(n_seq_max)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).token_count) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_kv_cache_view),
            "::",
            stringify!(token_count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).used_cells) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_kv_cache_view),
            "::",
            stringify!(used_cells)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_contiguous) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_kv_cache_view),
            "::",
            stringify!(max_contiguous)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max_contiguous_idx) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_kv_cache_view),
            "::",
            stringify!(max_contiguous_idx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cells) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_kv_cache_view),
            "::",
            stringify!(cells)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cells_sequences) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_kv_cache_view),
            "::",
            stringify!(cells_sequences)
        )
    );
}
extern "C" {
    pub fn llama_kv_cache_view_init(
        ctx: *const llama_context,
        n_seq_max: i32,
    ) -> llama_kv_cache_view;
}
extern "C" {
    pub fn llama_kv_cache_view_free(view: *mut llama_kv_cache_view);
}
extern "C" {
    pub fn llama_kv_cache_view_update(ctx: *const llama_context, view: *mut llama_kv_cache_view);
}
extern "C" {
    pub fn llama_get_kv_cache_token_count(ctx: *const llama_context) -> i32;
}
extern "C" {
    pub fn llama_get_kv_cache_used_cells(ctx: *const llama_context) -> i32;
}
extern "C" {
    pub fn llama_kv_cache_clear(ctx: *mut llama_context);
}
extern "C" {
    pub fn llama_kv_cache_seq_rm(
        ctx: *mut llama_context,
        seq_id: llama_seq_id,
        p0: llama_pos,
        p1: llama_pos,
    ) -> bool;
}
extern "C" {
    pub fn llama_kv_cache_seq_cp(
        ctx: *mut llama_context,
        seq_id_src: llama_seq_id,
        seq_id_dst: llama_seq_id,
        p0: llama_pos,
        p1: llama_pos,
    );
}
extern "C" {
    pub fn llama_kv_cache_seq_keep(ctx: *mut llama_context, seq_id: llama_seq_id);
}
extern "C" {
    pub fn llama_kv_cache_seq_add(
        ctx: *mut llama_context,
        seq_id: llama_seq_id,
        p0: llama_pos,
        p1: llama_pos,
        delta: llama_pos,
    );
}
extern "C" {
    pub fn llama_kv_cache_seq_div(
        ctx: *mut llama_context,
        seq_id: llama_seq_id,
        p0: llama_pos,
        p1: llama_pos,
        d: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn llama_kv_cache_seq_pos_max(ctx: *mut llama_context, seq_id: llama_seq_id) -> llama_pos;
}
extern "C" {
    pub fn llama_kv_cache_defrag(ctx: *mut llama_context);
}
extern "C" {
    pub fn llama_kv_cache_update(ctx: *mut llama_context);
}
extern "C" {
    pub fn llama_get_state_size(ctx: *const llama_context) -> usize;
}
extern "C" {
    pub fn llama_copy_state_data(ctx: *mut llama_context, dst: *mut u8) -> usize;
}
extern "C" {
    pub fn llama_set_state_data(ctx: *mut llama_context, src: *const u8) -> usize;
}
extern "C" {
    pub fn llama_load_session_file(
        ctx: *mut llama_context,
        path_session: *const ::std::os::raw::c_char,
        tokens_out: *mut llama_token,
        n_token_capacity: usize,
        n_token_count_out: *mut usize,
    ) -> bool;
}
extern "C" {
    pub fn llama_save_session_file(
        ctx: *mut llama_context,
        path_session: *const ::std::os::raw::c_char,
        tokens: *const llama_token,
        n_token_count: usize,
    ) -> bool;
}
extern "C" {
    pub fn llama_batch_get_one(
        tokens: *mut llama_token,
        n_tokens: i32,
        pos_0: llama_pos,
        seq_id: llama_seq_id,
    ) -> llama_batch;
}
extern "C" {
    pub fn llama_batch_init(n_tokens: i32, embd: i32, n_seq_max: i32) -> llama_batch;
}
extern "C" {
    pub fn llama_batch_free(batch: llama_batch);
}
extern "C" {
    pub fn llama_decode(ctx: *mut llama_context, batch: llama_batch) -> i32;
}
extern "C" {
    pub fn llama_set_n_threads(ctx: *mut llama_context, n_threads: u32, n_threads_batch: u32);
}
extern "C" {
    pub fn llama_set_causal_attn(ctx: *mut llama_context, causal_attn: bool);
}
extern "C" {
    pub fn llama_set_abort_callback(
        ctx: *mut llama_context,
        abort_callback: ggml_abort_callback,
        abort_callback_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn llama_synchronize(ctx: *mut llama_context);
}
extern "C" {
    pub fn llama_get_logits(ctx: *mut llama_context) -> *mut f32;
}
extern "C" {
    pub fn llama_get_logits_ith(ctx: *mut llama_context, i: i32) -> *mut f32;
}
extern "C" {
    pub fn llama_get_embeddings(ctx: *mut llama_context) -> *mut f32;
}
extern "C" {
    pub fn llama_get_embeddings_ith(ctx: *mut llama_context, i: i32) -> *mut f32;
}
extern "C" {
    pub fn llama_get_embeddings_seq(ctx: *mut llama_context, seq_id: llama_seq_id) -> *mut f32;
}
extern "C" {
    pub fn llama_token_get_text(
        model: *const llama_model,
        token: llama_token,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn llama_token_get_score(model: *const llama_model, token: llama_token) -> f32;
}
extern "C" {
    pub fn llama_token_get_type(model: *const llama_model, token: llama_token) -> llama_token_type;
}
extern "C" {
    pub fn llama_token_bos(model: *const llama_model) -> llama_token;
}
extern "C" {
    pub fn llama_token_eos(model: *const llama_model) -> llama_token;
}
extern "C" {
    pub fn llama_token_nl(model: *const llama_model) -> llama_token;
}
extern "C" {
    pub fn llama_add_bos_token(model: *const llama_model) -> i32;
}
extern "C" {
    pub fn llama_add_eos_token(model: *const llama_model) -> i32;
}
extern "C" {
    pub fn llama_token_prefix(model: *const llama_model) -> llama_token;
}
extern "C" {
    pub fn llama_token_middle(model: *const llama_model) -> llama_token;
}
extern "C" {
    pub fn llama_token_suffix(model: *const llama_model) -> llama_token;
}
extern "C" {
    pub fn llama_token_eot(model: *const llama_model) -> llama_token;
}
extern "C" {
    #[doc = " @details Convert the provided text into tokens.\n @param tokens The tokens pointer must be large enough to hold the resulting tokens.\n @return Returns the number of tokens on success, no more than n_tokens_max\n @return Returns a negative number on failure - the number of tokens that would have been returned\n @param special Allow tokenizing special and/or control tokens which otherwise are not exposed and treated as plaintext.\n                Does not insert a leading space."]
    pub fn llama_tokenize(
        model: *const llama_model,
        text: *const ::std::os::raw::c_char,
        text_len: i32,
        tokens: *mut llama_token,
        n_tokens_max: i32,
        add_bos: bool,
        special: bool,
    ) -> i32;
}
extern "C" {
    pub fn llama_token_to_piece(
        model: *const llama_model,
        token: llama_token,
        buf: *mut ::std::os::raw::c_char,
        length: i32,
    ) -> i32;
}
extern "C" {
    #[doc = " Apply chat template. Inspired by hf apply_chat_template() on python.\n Both \"model\" and \"custom_template\" are optional, but at least one is required. \"custom_template\" has higher precedence than \"model\"\n NOTE: This function does not use a jinja parser. It only support a pre-defined list of template. See more: https://github.com/ggerganov/llama.cpp/wiki/Templates-supported-by-llama_chat_apply_template\n @param tmpl A Jinja template to use for this chat. If this is nullptr, the model’s default chat template will be used instead.\n @param chat Pointer to a list of multiple llama_chat_message\n @param n_msg Number of llama_chat_message in this chat\n @param add_ass Whether to end the prompt with the token(s) that indicate the start of an assistant message.\n @param buf A buffer to hold the output formatted prompt. The recommended alloc size is 2 * (total number of characters of all messages)\n @param length The size of the allocated buffer\n @return The total number of bytes of the formatted prompt. If is it larger than the size of buffer, you may need to re-alloc it and then re-apply the template."]
    pub fn llama_chat_apply_template(
        model: *const llama_model,
        tmpl: *const ::std::os::raw::c_char,
        chat: *const llama_chat_message,
        n_msg: usize,
        add_ass: bool,
        buf: *mut ::std::os::raw::c_char,
        length: i32,
    ) -> i32;
}
extern "C" {
    pub fn llama_grammar_init(
        rules: *mut *const llama_grammar_element,
        n_rules: usize,
        start_rule_index: usize,
    ) -> *mut llama_grammar;
}
extern "C" {
    pub fn llama_grammar_free(grammar: *mut llama_grammar);
}
extern "C" {
    pub fn llama_grammar_copy(grammar: *const llama_grammar) -> *mut llama_grammar;
}
extern "C" {
    pub fn llama_set_rng_seed(ctx: *mut llama_context, seed: u32);
}
extern "C" {
    #[doc = " @details Repetition penalty described in CTRL academic paper https://arxiv.org/abs/1909.05858, with negative logit fix.\n @details Frequency and presence penalties described in OpenAI API https://platform.openai.com/docs/api-reference/parameter-details."]
    pub fn llama_sample_repetition_penalties(
        ctx: *mut llama_context,
        candidates: *mut llama_token_data_array,
        last_tokens: *const llama_token,
        penalty_last_n: usize,
        penalty_repeat: f32,
        penalty_freq: f32,
        penalty_present: f32,
    );
}
extern "C" {
    #[doc = " @details Apply classifier-free guidance to the logits as described in academic paper \"Stay on topic with Classifier-Free Guidance\" https://arxiv.org/abs/2306.17806\n @param logits Logits extracted from the original generation context.\n @param logits_guidance Logits extracted from a separate context from the same model. Other than a negative prompt at the beginning, it should have all generated and user input tokens copied from the main context.\n @param scale Guidance strength. 1.0f means no guidance. Higher values mean stronger guidance."]
    pub fn llama_sample_apply_guidance(
        ctx: *mut llama_context,
        logits: *mut f32,
        logits_guidance: *mut f32,
        scale: f32,
    );
}
extern "C" {
    #[doc = " @details Sorts candidate tokens by their logits in descending order and calculate probabilities based on logits."]
    pub fn llama_sample_softmax(ctx: *mut llama_context, candidates: *mut llama_token_data_array);
}
extern "C" {
    #[doc = " @details Top-K sampling described in academic paper \"The Curious Case of Neural Text Degeneration\" https://arxiv.org/abs/1904.09751"]
    pub fn llama_sample_top_k(
        ctx: *mut llama_context,
        candidates: *mut llama_token_data_array,
        k: i32,
        min_keep: usize,
    );
}
extern "C" {
    #[doc = " @details Nucleus sampling described in academic paper \"The Curious Case of Neural Text Degeneration\" https://arxiv.org/abs/1904.09751"]
    pub fn llama_sample_top_p(
        ctx: *mut llama_context,
        candidates: *mut llama_token_data_array,
        p: f32,
        min_keep: usize,
    );
}
extern "C" {
    #[doc = " @details Minimum P sampling as described in https://github.com/ggerganov/llama.cpp/pull/3841"]
    pub fn llama_sample_min_p(
        ctx: *mut llama_context,
        candidates: *mut llama_token_data_array,
        p: f32,
        min_keep: usize,
    );
}
extern "C" {
    #[doc = " @details Tail Free Sampling described in https://www.trentonbricken.com/Tail-Free-Sampling/."]
    pub fn llama_sample_tail_free(
        ctx: *mut llama_context,
        candidates: *mut llama_token_data_array,
        z: f32,
        min_keep: usize,
    );
}
extern "C" {
    #[doc = " @details Locally Typical Sampling implementation described in the paper https://arxiv.org/abs/2202.00666."]
    pub fn llama_sample_typical(
        ctx: *mut llama_context,
        candidates: *mut llama_token_data_array,
        p: f32,
        min_keep: usize,
    );
}
extern "C" {
    #[doc = " @details Dynamic temperature implementation described in the paper https://arxiv.org/abs/2309.02772."]
    pub fn llama_sample_entropy(
        ctx: *mut llama_context,
        candidates_p: *mut llama_token_data_array,
        min_temp: f32,
        max_temp: f32,
        exponent_val: f32,
    );
}
extern "C" {
    pub fn llama_sample_temp(
        ctx: *mut llama_context,
        candidates: *mut llama_token_data_array,
        temp: f32,
    );
}
extern "C" {
    #[doc = " @details Apply constraints from grammar"]
    pub fn llama_sample_grammar(
        ctx: *mut llama_context,
        candidates: *mut llama_token_data_array,
        grammar: *const llama_grammar,
    );
}
extern "C" {
    #[doc = " @details Mirostat 1.0 algorithm described in the paper https://arxiv.org/abs/2007.14966. Uses tokens instead of words.\n @param candidates A vector of `llama_token_data` containing the candidate tokens, their probabilities (p), and log-odds (logit) for the current position in the generated text.\n @param tau  The target cross-entropy (or surprise) value you want to achieve for the generated text. A higher value corresponds to more surprising or less predictable text, while a lower value corresponds to less surprising or more predictable text.\n @param eta The learning rate used to update `mu` based on the error between the target and observed surprisal of the sampled word. A larger learning rate will cause `mu` to be updated more quickly, while a smaller learning rate will result in slower updates.\n @param m The number of tokens considered in the estimation of `s_hat`. This is an arbitrary value that is used to calculate `s_hat`, which in turn helps to calculate the value of `k`. In the paper, they use `m = 100`, but you can experiment with different values to see how it affects the performance of the algorithm.\n @param mu Maximum cross-entropy. This value is initialized to be twice the target cross-entropy (`2 * tau`) and is updated in the algorithm based on the error between the target and observed surprisal."]
    pub fn llama_sample_token_mirostat(
        ctx: *mut llama_context,
        candidates: *mut llama_token_data_array,
        tau: f32,
        eta: f32,
        m: i32,
        mu: *mut f32,
    ) -> llama_token;
}
extern "C" {
    #[doc = " @details Mirostat 2.0 algorithm described in the paper https://arxiv.org/abs/2007.14966. Uses tokens instead of words.\n @param candidates A vector of `llama_token_data` containing the candidate tokens, their probabilities (p), and log-odds (logit) for the current position in the generated text.\n @param tau  The target cross-entropy (or surprise) value you want to achieve for the generated text. A higher value corresponds to more surprising or less predictable text, while a lower value corresponds to less surprising or more predictable text.\n @param eta The learning rate used to update `mu` based on the error between the target and observed surprisal of the sampled word. A larger learning rate will cause `mu` to be updated more quickly, while a smaller learning rate will result in slower updates.\n @param mu Maximum cross-entropy. This value is initialized to be twice the target cross-entropy (`2 * tau`) and is updated in the algorithm based on the error between the target and observed surprisal."]
    pub fn llama_sample_token_mirostat_v2(
        ctx: *mut llama_context,
        candidates: *mut llama_token_data_array,
        tau: f32,
        eta: f32,
        mu: *mut f32,
    ) -> llama_token;
}
extern "C" {
    #[doc = " @details Selects the token with the highest probability.\n          Does not compute the token probabilities. Use llama_sample_softmax() instead."]
    pub fn llama_sample_token_greedy(
        ctx: *mut llama_context,
        candidates: *mut llama_token_data_array,
    ) -> llama_token;
}
extern "C" {
    #[doc = " @details Randomly selects a token from the candidates based on their probabilities."]
    pub fn llama_sample_token(
        ctx: *mut llama_context,
        candidates: *mut llama_token_data_array,
    ) -> llama_token;
}
extern "C" {
    #[doc = " @details Accepts the sampled token into the grammar"]
    pub fn llama_grammar_accept_token(
        ctx: *mut llama_context,
        grammar: *mut llama_grammar,
        token: llama_token,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_beam_view {
    pub tokens: *const llama_token,
    pub n_tokens: usize,
    pub p: f32,
    pub eob: bool,
}
#[test]
fn bindgen_test_layout_llama_beam_view() {
    const UNINIT: ::std::mem::MaybeUninit<llama_beam_view> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<llama_beam_view>(),
        24usize,
        concat!("Size of: ", stringify!(llama_beam_view))
    );
    assert_eq!(
        ::std::mem::align_of::<llama_beam_view>(),
        8usize,
        concat!("Alignment of ", stringify!(llama_beam_view))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tokens) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_beam_view),
            "::",
            stringify!(tokens)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_tokens) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_beam_view),
            "::",
            stringify!(n_tokens)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).p) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_beam_view),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eob) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_beam_view),
            "::",
            stringify!(eob)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct llama_beams_state {
    pub beam_views: *mut llama_beam_view,
    pub n_beams: usize,
    pub common_prefix_length: usize,
    pub last_call: bool,
}
#[test]
fn bindgen_test_layout_llama_beams_state() {
    const UNINIT: ::std::mem::MaybeUninit<llama_beams_state> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<llama_beams_state>(),
        32usize,
        concat!("Size of: ", stringify!(llama_beams_state))
    );
    assert_eq!(
        ::std::mem::align_of::<llama_beams_state>(),
        8usize,
        concat!("Alignment of ", stringify!(llama_beams_state))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).beam_views) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_beams_state),
            "::",
            stringify!(beam_views)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).n_beams) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_beams_state),
            "::",
            stringify!(n_beams)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).common_prefix_length) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_beams_state),
            "::",
            stringify!(common_prefix_length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).last_call) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(llama_beams_state),
            "::",
            stringify!(last_call)
        )
    );
}
pub type llama_beam_search_callback_fn_t = ::std::option::Option<
    unsafe extern "C" fn(callback_data: *mut ::std::os::raw::c_void, arg1: llama_beams_state),
>;
extern "C" {
    #[doc = " @details Deterministically returns entire sentence constructed by a beam search.\n @param ctx Pointer to the llama_context.\n @param callback Invoked for each iteration of the beam_search loop, passing in beams_state.\n @param callback_data A pointer that is simply passed back to callback.\n @param n_beams Number of beams to use.\n @param n_past Number of tokens already evaluated.\n @param n_predict Maximum number of tokens to predict. EOS may occur earlier."]
    pub fn llama_beam_search(
        ctx: *mut llama_context,
        callback: llama_beam_search_callback_fn_t,
        callback_data: *mut ::std::os::raw::c_void,
        n_beams: usize,
        n_past: i32,
        n_predict: i32,
    );
}
extern "C" {
    #[doc = " @details Build a split GGUF final path for this chunk.\n          llama_split_path(split_path, sizeof(split_path), \"/models/ggml-model-q4_0\", 2, 4) => split_path = \"/models/ggml-model-q4_0-00002-of-00004.gguf\""]
    pub fn llama_split_path(
        split_path: *mut ::std::os::raw::c_char,
        maxlen: usize,
        path_prefix: *const ::std::os::raw::c_char,
        split_no: ::std::os::raw::c_int,
        split_count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @details Extract the path prefix from the split_path if and only if the split_no and split_count match.\n          llama_split_prefix(split_prefix, 64, \"/models/ggml-model-q4_0-00002-of-00004.gguf\", 2, 4) => split_prefix = \"/models/ggml-model-q4_0\""]
    pub fn llama_split_prefix(
        split_prefix: *mut ::std::os::raw::c_char,
        maxlen: usize,
        split_path: *const ::std::os::raw::c_char,
        split_no: ::std::os::raw::c_int,
        split_count: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llama_get_timings(ctx: *mut llama_context) -> llama_timings;
}
extern "C" {
    pub fn llama_print_timings(ctx: *mut llama_context);
}
extern "C" {
    pub fn llama_reset_timings(ctx: *mut llama_context);
}
extern "C" {
    pub fn llama_print_system_info() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn llama_log_set(log_callback: ggml_log_callback, user_data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn llama_dump_timing_info_yaml(stream: *mut FILE, ctx: *const llama_context);
}
#[repr(C)]
#[derive(Debug, Copy, Clone, PartialEq)]
pub struct ggml_backend_buffer {
    pub _address: u8,
}
